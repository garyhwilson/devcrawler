{"version":3,"file":"game.js","mappings":"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","sources":["webpack://devcrawler/./src/game/Camera.js","webpack://devcrawler/./src/game/dungeon/Corridor.js","webpack://devcrawler/./src/game/dungeon/DungeonGenerator.js","webpack://devcrawler/./src/game/dungeon/Room.js","webpack://devcrawler/./src/game/dungeon/RoomColors.js","webpack://devcrawler/./src/game/grid/GridCell.js","webpack://devcrawler/./src/game/grid/GridManager.js","webpack://devcrawler/webpack/bootstrap","webpack://devcrawler/webpack/runtime/define property getters","webpack://devcrawler/webpack/runtime/hasOwnProperty shorthand","webpack://devcrawler/webpack/runtime/make namespace object","webpack://devcrawler/./src/game/index.js"],"sourcesContent":["export class Camera {\n  constructor(width, height, worldWidth, worldHeight, tileSize) {\n    this.width = width;\n    this.height = height;\n    this.worldWidth = worldWidth;\n    this.worldHeight = worldHeight;\n    this.tileSize = tileSize;\n    this.x = 0;\n    this.y = 0;\n\n    // Calculate the number of tiles that can be displayed\n    this.tilesX = Math.floor(width / tileSize);\n    this.tilesY = Math.floor(height / tileSize);\n\n    // Scroll threshold in tiles (5 tiles from edge)\n    this.scrollThreshold = 5;\n  }\n\n  // Update camera position based on target (player) position\n  follow(targetX, targetY) {\n    // Convert target position to screen space\n    const screenX = (targetX * this.tileSize) - this.x;\n    const screenY = (targetY * this.tileSize) - this.y;\n\n    // Check if target is too close to screen edges\n    if (screenX < this.scrollThreshold * this.tileSize) {\n      this.x = (targetX * this.tileSize) - (this.scrollThreshold * this.tileSize);\n    }\n    if (screenX > this.width - (this.scrollThreshold * this.tileSize)) {\n      this.x = (targetX * this.tileSize) - this.width + (this.scrollThreshold * this.tileSize);\n    }\n    if (screenY < this.scrollThreshold * this.tileSize) {\n      this.y = (targetY * this.tileSize) - (this.scrollThreshold * this.tileSize);\n    }\n    if (screenY > this.height - (this.scrollThreshold * this.tileSize)) {\n      this.y = (targetY * this.tileSize) - this.height + (this.scrollThreshold * this.tileSize);\n    }\n\n    // Clamp camera position to world bounds\n    this.x = Math.max(0, Math.min(this.x, (this.worldWidth * this.tileSize) - this.width));\n    this.y = Math.max(0, Math.min(this.y, (this.worldHeight * this.tileSize) - this.height));\n  }\n\n  // Convert world coordinates to screen coordinates\n  worldToScreen(worldX, worldY) {\n    return {\n      x: (worldX * this.tileSize) - this.x,\n      y: (worldY * this.tileSize) - this.y\n    };\n  }\n\n  // Check if a tile is visible on screen\n  isVisible(worldX, worldY) {\n    const screenPos = this.worldToScreen(worldX, worldY);\n    return screenPos.x >= -this.tileSize &&\n      screenPos.x <= this.width &&\n      screenPos.y >= -this.tileSize &&\n      screenPos.y <= this.height;\n  }\n}\n","export class Corridor {\n  constructor(startX, startY, endX, endY) {\n    this.startX = startX;\n    this.startY = startY;\n    this.endX = endX;\n    this.endY = endY;\n    this.type = 'corridor';\n    this.path = [];\n    this.generatePath();\n  }\n\n  generatePath() {\n    this.path = [];\n    let currentX = this.startX;\n    let currentY = this.startY;\n\n    // Always go horizontal first, then vertical\n    // This creates more predictable corridors\n    while (currentX !== this.endX) {\n      currentX += currentX < this.endX ? 1 : -1;\n      this.path.push({ x: currentX, y: currentY });\n    }\n\n    while (currentY !== this.endY) {\n      currentY += currentY < this.endY ? 1 : -1;\n      this.path.push({ x: currentX, y: currentY });\n    }\n  }\n}\n","// src/game/dungeon/DungeonGenerator.js\n\nimport { Room } from './Room.js';\nimport { Corridor } from './Corridor.js';\n\nexport class DungeonGenerator {\n  constructor(width, height) {\n    this.width = width;\n    this.height = height;\n    this.rooms = [];\n    this.corridors = [];\n    this.grid = Array(height).fill().map(() => Array(width).fill(0));\n  }\n\n  generate() {\n    this.rooms = [];\n    this.corridors = [];\n    this.grid = Array(this.height).fill().map(() => Array(this.width).fill(0));\n\n    this.generateRooms();\n    this.connectRooms();\n    this.applyToGrid();\n\n    return {\n      grid: this.grid,\n      rooms: this.rooms,\n      corridors: this.corridors\n    };\n  }\n\n  generateRooms(attempts = 50) {\n    for (let i = 0; i < attempts; i++) {\n      const minSize = 5;\n      const maxSize = 10;\n\n      const width = minSize + Math.floor(Math.random() * (maxSize - minSize));\n      const height = minSize + Math.floor(Math.random() * (maxSize - minSize));\n\n      const x = Math.floor(Math.random() * (this.width - width - 2)) + 1;\n      const y = Math.floor(Math.random() * (this.height - height - 2)) + 1;\n\n      const newRoom = new Room(x, y, width, height);\n\n      let overlaps = false;\n      for (const room of this.rooms) {\n        if (newRoom.intersects(room, 2)) {\n          overlaps = true;\n          break;\n        }\n      }\n\n      if (!overlaps) {\n        this.rooms.push(newRoom);\n      }\n    }\n  }\n\n  connectRooms() {\n    const sortedRooms = [...this.rooms].sort((a, b) => a.x - b.x);\n\n    for (let i = 0; i < sortedRooms.length - 1; i++) {\n      const roomA = sortedRooms[i];\n      const roomB = sortedRooms[i + 1];\n\n      // Connect the rooms with a single corridor\n      this.createSingleCorridor(roomA, roomB);\n    }\n  }\n\n  createSingleCorridor(roomA, roomB) {\n    const startPoint = this.findBestExitPoint(roomA, roomB);\n    const endPoint = this.findBestExitPoint(roomB, roomA);\n\n    // Create the corridor\n    const corridor = new Corridor(startPoint.x, startPoint.y, endPoint.x, endPoint.y);\n\n    // Remove points that are inside rooms\n    corridor.path = corridor.path.filter(point =>\n      !this.isPointInAnyRoom(point.x, point.y)\n    );\n\n    // Only proceed if corridor is long enough\n    if (corridor.path.length < 4) return;\n\n    // Find the actual intersection points with rooms\n    const startDoor = this.findDoorPoint(corridor.path[0], roomA);\n    const endDoor = this.findDoorPoint(corridor.path[corridor.path.length - 1], roomB);\n\n    if (!startDoor || !endDoor) return;\n\n    // Add the corridor to the grid\n    corridor.path.forEach(point => {\n      this.grid[point.y][point.x] = 1; // floor\n    });\n\n    // Add the doors\n    this.grid[startDoor.y][startDoor.x] = 2; // door\n    this.grid[endDoor.y][endDoor.x] = 2; // door\n\n    this.corridors.push(corridor);\n  }\n\n  findBestExitPoint(room, targetRoom) {\n    const roomCenter = room.getCenter();\n    const targetCenter = targetRoom.getCenter();\n\n    // Determine which edge to use\n    let x = roomCenter.x < targetCenter.x ?\n      room.x + room.width : // Use right edge\n      room.x;               // Use left edge\n\n    let y = roomCenter.y < targetCenter.y ?\n      room.y + room.height : // Use bottom edge\n      room.y;                // Use top edge\n\n    // Stay within room bounds\n    x = Math.max(room.x, Math.min(x, room.x + room.width));\n    y = Math.max(room.y, Math.min(y, room.y + room.height));\n\n    return { x, y };\n  }\n\n  findDoorPoint(corridorPoint, room) {\n    // Check if the point is adjacent to the room\n    const adjacentPoints = [\n      { x: corridorPoint.x - 1, y: corridorPoint.y },\n      { x: corridorPoint.x + 1, y: corridorPoint.y },\n      { x: corridorPoint.x, y: corridorPoint.y - 1 },\n      { x: corridorPoint.x, y: corridorPoint.y + 1 }\n    ];\n\n    // Find the point that intersects with the room\n    for (const point of adjacentPoints) {\n      if (this.isPointInRoom(point, room)) {\n        return corridorPoint; // The corridor point becomes the door\n      }\n    }\n\n    return null;\n  }\n\n  isPointInRoom(point, room) {\n    return point.x >= room.x &&\n      point.x < room.x + room.width &&\n      point.y >= room.y &&\n      point.y < room.y + room.height;\n  }\n\n  mergeIntersectingCorridors(corridors) {\n    const merged = [];\n    const used = new Set();\n\n    for (let i = 0; i < corridors.length; i++) {\n      if (used.has(i)) continue;\n\n      let currentCorridor = { ...corridors[i] };\n      used.add(i);\n\n      let mergedAny;\n      do {\n        mergedAny = false;\n        for (let j = 0; j < corridors.length; j++) {\n          if (used.has(j)) continue;\n\n          if (this.doCorridorsIntersect(currentCorridor, corridors[j])) {\n            currentCorridor = this.mergeTwoCorridors(currentCorridor, corridors[j]);\n            used.add(j);\n            mergedAny = true;\n          }\n        }\n      } while (mergedAny);\n\n      merged.push(currentCorridor);\n    }\n\n    return merged;\n  }\n\n  doCorridorsIntersect(corridorA, corridorB) {\n    return corridorA.path.some(pointA =>\n      corridorB.path.some(pointB =>\n        pointA.x === pointB.x && pointA.y === pointB.y));\n  }\n\n  mergeTwoCorridors(corridorA, corridorB) {\n    // Create a set of all points to remove duplicates\n    const allPoints = new Set(\n      [...corridorA.path, ...corridorB.path].map(p => `${p.x},${p.y}`)\n    );\n\n    // Convert back to array of point objects\n    const mergedPath = Array.from(allPoints).map(str => {\n      const [x, y] = str.split(',').map(Number);\n      return { x, y };\n    });\n\n    return {\n      path: mergedPath,\n      type: 'corridor'\n    };\n  }\n\n  findValidDoorPointsForMergedCorridor(corridor) {\n    const doorPoints = [];\n\n    // For each point in the corridor\n    corridor.path.forEach(point => {\n      // Check if this point connects to any room\n      const connectedRoom = this.findConnectedRoom(point);\n      if (connectedRoom) {\n        // Verify this is a valid door location\n        if (this.isValidDoorLocation(point, corridor.path, connectedRoom)) {\n          doorPoints.push(point);\n        }\n      }\n    });\n\n    return doorPoints;\n  }\n\n  findConnectedRoom(point) {\n    return this.rooms.find(room =>\n      point.x >= room.x - 1 && point.x <= room.x + room.width &&\n      point.y >= room.y - 1 && point.y <= room.y + room.height\n    );\n  }\n\n  isValidDoorLocation(point, corridorPath, room) {\n    // Must be exactly at the room boundary\n    const isAtBoundary =\n      (point.x === room.x - 1 && point.y >= room.y && point.y < room.y + room.height) ||\n      (point.x === room.x + room.width && point.y >= room.y && point.y < room.y + room.height) ||\n      (point.y === room.y - 1 && point.x >= room.x && point.x < room.x + room.width) ||\n      (point.y === room.y + room.height && point.x >= room.x && point.x < room.x + room.width);\n\n    if (!isAtBoundary) return false;\n\n    // Check that there's actual corridor (not just another room) on the other side\n    const neighbors = this.getAdjacentPoints(point);\n    const hasCorridorConnection = neighbors.some(n =>\n      corridorPath.some(p => p.x === n.x && p.y === n.y) &&\n      !this.isPointInAnyRoom(n.x, n.y)\n    );\n\n    return hasCorridorConnection;\n  }\n\n  createCorridorBetweenRooms(roomA, roomB) {\n    const startPoint = this.findClosestDoorPoint(roomA, roomB);\n    const endPoint = this.findClosestDoorPoint(roomB, roomA);\n\n    const corridor = new Corridor(startPoint.x, startPoint.y, endPoint.x, endPoint.y);\n    corridor.path = corridor.path.filter(point => !this.isPointInAnyRoom(point.x, point.y));\n\n    return corridor.path.length >= 4 ? corridor : null;\n  }\n\n\n  findBestConnection(roomA, roomB) {\n    // Try different connection strategies\n    const strategies = [\n      { dx: 0, dy: 0 },    // Direct\n      { dx: 0, dy: 1 },    // Offset up\n      { dx: 0, dy: -1 },   // Offset down\n      { dx: 1, dy: 0 },    // Offset right\n      { dx: -1, dy: 0 }    // Offset left\n    ];\n\n    for (const { dx, dy } of strategies) {\n      // Find potential connection points\n      const startPoint = this.findConnectionPoint(roomA, roomB, dx, dy);\n      const endPoint = this.findConnectionPoint(roomB, roomA, -dx, -dy);\n\n      // Create and validate corridor\n      const corridor = new Corridor(startPoint.x, startPoint.y, endPoint.x, endPoint.y);\n\n      // Remove room intersections\n      corridor.path = corridor.path.filter(point =>\n        !this.isPointInAnyRoom(point.x, point.y));\n\n      // Validate corridor\n      if (corridor.path.length >= 4 && this.isValidCorridor(corridor)) {\n        // Find door placement points\n        const doorPoints = this.getDoorPoints(corridor, roomA, roomB);\n        if (doorPoints.length === 2) { // Ensure exactly two doors\n          return { corridor, doorPoints };\n        }\n      }\n    }\n    return null;\n  }\n\n  findConnectionPoint(room, targetRoom, offsetX, offsetY) {\n    const roomCenter = room.getCenter();\n    const targetCenter = targetRoom.getCenter();\n\n    // Determine which edge to use based on relative position\n    let x, y;\n\n    if (roomCenter.x < targetCenter.x) {\n      x = room.x + room.width - 1; // Right edge\n    } else {\n      x = room.x; // Left edge\n    }\n\n    if (roomCenter.y < targetCenter.y) {\n      y = room.y + room.height - 1; // Bottom edge\n    } else {\n      y = room.y; // Top edge\n    }\n\n    // Apply offset\n    x += offsetX;\n    y += offsetY;\n\n    return { x, y };\n  }\n\n  isValidCorridor(corridor) {\n    // Check minimum length\n    if (corridor.path.length < 4) return false;\n\n    // Check for nearby doors or other corridors\n    for (const point of corridor.path) {\n      const neighbors = this.getAdjacentPoints(point);\n      for (const neighbor of neighbors) {\n        // Check if neighbor is a door or part of another corridor\n        if (this.grid[neighbor.y][neighbor.x] === 2) return false;\n      }\n    }\n\n    return true;\n  }\n\n  findDoorPlacementPoints(corridor) {\n    const doorPoints = [];\n\n    // Check start of corridor\n    const startSegment = corridor.path.slice(0, 3);\n    const validStart = this.isValidDoorPlacement(startSegment[1], corridor);\n    if (validStart) {\n      doorPoints.push(startSegment[1]);\n    }\n\n    // Check end of corridor\n    const endSegment = corridor.path.slice(-3);\n    const validEnd = this.isValidDoorPlacement(endSegment[1], corridor);\n    if (validEnd) {\n      doorPoints.push(endSegment[1]);\n    }\n\n    return doorPoints;\n  }\n\n  findClosestDoorPoint(roomA, roomB) {\n    // Find the edge of roomA that's closest to roomB\n    const centerA = roomA.getCenter();\n    const centerB = roomB.getCenter();\n\n    let x, y;\n\n    if (centerA.x < centerB.x) {\n      x = roomA.x + roomA.width - 1; // Right edge\n    } else {\n      x = roomA.x; // Left edge\n    }\n\n    if (centerA.y < centerB.y) {\n      y = roomA.y + roomA.height - 1; // Bottom edge\n    } else {\n      y = roomA.y; // Top edge\n    }\n\n    return { x, y };\n  }\n\n  isPointInAnyRoom(x, y) {\n    return this.rooms.some(room =>\n      x >= room.x && x < room.x + room.width &&\n      y >= room.y && y < room.y + room.height\n    );\n  }\n\n  getAdjacentPoints(point) {\n    const neighbors = [];\n    const deltas = [[-1, 0], [1, 0], [0, -1], [0, 1]];\n\n    for (const [dx, dy] of deltas) {\n      const x = point.x + dx;\n      const y = point.y + dy;\n      if (this.isInBounds(x, y)) {\n        neighbors.push({ x, y });\n      }\n    }\n\n    return neighbors;\n  }\n\n  getDoorPoints(corridor, roomA, roomB) {\n    const doorPoints = [];\n\n    // Check first and last points of corridor\n    const start = corridor.path[0];\n    const end = corridor.path[corridor.path.length - 1];\n\n    // Only add door points that are actually connecting to rooms\n    if (this.isAdjacentToRoom(start, roomA)) doorPoints.push(start);\n    if (this.isAdjacentToRoom(end, roomB)) doorPoints.push(end);\n\n    return doorPoints;\n  }\n\n  isAdjacentToRoom(point, room) {\n    return point.x >= room.x - 1 &&\n      point.x <= room.x + room.width &&\n      point.y >= room.y - 1 &&\n      point.y <= room.y + room.height;\n  }\n\n  isValidDoorPlacement(point, corridor) {\n    // Check if there's enough space around the door\n    const neighboringCells = [\n      { x: point.x - 1, y: point.y },\n      { x: point.x + 1, y: point.y },\n      { x: point.x, y: point.y - 1 },\n      { x: point.x, y: point.y + 1 }\n    ];\n\n    // Count how many corridor cells are adjacent\n    const corridorNeighbors = neighboringCells.filter(cell =>\n      corridor.path.some(p => p.x === cell.x && p.y === cell.y)\n    );\n\n    // Only place door if it connects exactly two spaces\n    // (one corridor side and one room side)\n    return corridorNeighbors.length === 1;\n  }\n\n  assignRoomTypes() {\n    // Sort rooms by size\n    const sortedRooms = [...this.rooms].sort((a, b) =>\n      (b.width * b.height) - (a.width * a.height));\n\n    // Assign types based on size and position\n    sortedRooms[0].setType(RoomType.LARGE_HALL);\n\n    // Find the room closest to top-left for entrance\n    const topLeftRoom = this.rooms.reduce((closest, room) => {\n      const distance = Math.sqrt(room.x * room.x + room.y * room.y);\n      if (!closest || distance < Math.sqrt(closest.x * closest.x + closest.y * closest.y)) {\n        return room;\n      }\n      return closest;\n    });\n    topLeftRoom.setType(RoomType.ENTRANCE);\n\n    // Find the room farthest from entrance for boss\n    const farthestRoom = this.rooms.reduce((farthest, room) => {\n      const distance = Math.sqrt(\n        Math.pow(room.x - topLeftRoom.x, 2) +\n        Math.pow(room.y - topLeftRoom.y, 2)\n      );\n      if (!farthest || distance > Math.sqrt(\n        Math.pow(farthest.x - topLeftRoom.x, 2) +\n        Math.pow(farthest.y - topLeftRoom.y, 2)\n      )) {\n        return room;\n      }\n      return farthest;\n    });\n    farthestRoom.setType(RoomType.BOSS);\n\n    // Assign remaining rooms randomly\n    const remainingTypes = [RoomType.STORAGE, RoomType.TREASURE, RoomType.STANDARD];\n    this.rooms.forEach(room => {\n      if (!room.type || room.type === RoomType.STANDARD) {\n        const randomType = remainingTypes[Math.floor(Math.random() * remainingTypes.length)];\n        room.setType(randomType);\n      }\n    });\n  }\n\n  applyToGrid() {\n    // First pass: Apply rooms\n    for (const room of this.rooms) {\n      for (let y = room.y; y < room.y + room.height; y++) {\n        for (let x = room.x; x < room.x + room.width; x++) {\n          if (this.isInBounds(x, y)) {\n            this.grid[y][x] = 1; // floor\n          }\n        }\n      }\n    }\n\n    // Second pass: Apply corridors\n    for (const corridor of this.corridors) {\n      for (const point of corridor.path) {\n        if (this.isInBounds(point.x, point.y)) {\n          this.grid[point.y][point.x] = 1; // floor\n        }\n      }\n    }\n\n    // Third pass: Add walls\n    const tempGrid = this.grid.map(row => [...row]);\n    for (let y = 0; y < this.height; y++) {\n      for (let x = 0; x < this.width; x++) {\n        if (tempGrid[y][x] === 0) { // Empty space\n          if (this.hasAdjacentFloor(x, y)) {\n            this.grid[y][x] = 3; // wall\n          }\n        }\n      }\n    }\n\n    // Fourth pass: Place doors\n    console.log('Attempting to place doors...');\n    this.placeDoors();\n  }\n\n  placeDoors() {\n    for (const corridor of this.corridors) {\n      // Only check the points where the corridor meets rooms\n      const startPoint = corridor.path[0];\n      const endPoint = corridor.path[corridor.path.length - 1];\n\n      // Try to place doors at the ends of corridors\n      if (this.shouldPlaceDoor(startPoint.x, startPoint.y)) {\n        this.grid[startPoint.y][startPoint.x] = 2; // door tile value\n      }\n\n      if (this.shouldPlaceDoor(endPoint.x, endPoint.y)) {\n        this.grid[endPoint.y][endPoint.x] = 2; // door tile value\n      }\n    }\n  }\n\n  shouldPlaceDoor(x, y) {\n    if (!this.isInBounds(x, y)) return false;\n\n    // The point itself must be a floor tile\n    if (this.grid[y][x] !== 1) return false;\n\n    // Check if there's already a door nearby\n    for (let dy = -2; dy <= 2; dy++) {\n      for (let dx = -2; dx <= 2; dx++) {\n        const nx = x + dx;\n        const ny = y + dy;\n        if (this.isInBounds(nx, ny) && this.grid[ny][nx] === 2) {\n          return false; // Door too close\n        }\n      }\n    }\n\n    // Check horizontal door possibility (walls on north and south)\n    const horizontalDoor =\n      this.isInBounds(x, y - 1) && this.grid[y - 1][x] === 3 && // Wall above\n      this.isInBounds(x, y + 1) && this.grid[y + 1][x] === 3 && // Wall below\n      this.isInBounds(x - 1, y) && this.grid[y][x - 1] === 1 && // Floor left\n      this.isInBounds(x + 1, y) && this.grid[y][x + 1] === 1;   // Floor right\n\n    // Check vertical door possibility (walls on east and west)\n    const verticalDoor =\n      this.isInBounds(x - 1, y) && this.grid[y][x - 1] === 3 && // Wall left\n      this.isInBounds(x + 1, y) && this.grid[y][x + 1] === 3 && // Wall right\n      this.isInBounds(x, y - 1) && this.grid[y - 1][x] === 1 && // Floor above\n      this.isInBounds(x, y + 1) && this.grid[y + 1][x] === 1;   // Floor below\n\n    return horizontalDoor || verticalDoor;\n  }\n\n  hasAdjacentFloor(x, y) {\n    for (let dy = -1; dy <= 1; dy++) {\n      for (let dx = -1; dx <= 1; dx++) {\n        if (dx === 0 && dy === 0) continue;\n        const ny = y + dy;\n        const nx = x + dx;\n        if (this.isInBounds(nx, ny) && this.grid[ny][nx] === 1) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  isInBounds(x, y) {\n    return x >= 0 && x < this.width && y >= 0 && y < this.height;\n  }\n}\n","// src/game/dungeon/Room.js\n\nexport const RoomType = {\n  STANDARD: 'standard',\n  ENTRANCE: 'entrance',\n  LARGE_HALL: 'largeHall',\n  BOSS: 'boss',\n  STORAGE: 'storage',\n  TREASURE: 'treasure'\n};\n\nexport class Room {\n  constructor(x, y, width, height) {\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n    this.doors = [];\n    this.type = RoomType.STANDARD;\n    this.features = new Map();\n\n    // Additional properties for special rooms\n    this.isLocked = false;\n    this.requiredKey = null;\n    this.contents = new Set(); // For items, monsters, etc.\n  }\n\n  intersects(other, padding = 0) {\n    return !(this.x + this.width + padding < other.x ||\n      other.x + other.width + padding < this.x ||\n      this.y + this.height + padding < other.y ||\n      other.y + other.height + padding < this.y);\n  }\n\n  getCenter() {\n    return {\n      x: Math.floor(this.x + this.width / 2),\n      y: Math.floor(this.y + this.height / 2)\n    };\n  }\n\n  getBounds() {\n    return {\n      left: this.x,\n      right: this.x + this.width,\n      top: this.y,\n      bottom: this.y + this.height\n    };\n  }\n\n  addDoor(x, y, type = 'normal') {\n    this.doors.push({ x, y, type });\n  }\n\n  // Get minimum size requirements for each room type\n  static getMinSize(type) {\n    switch (type) {\n      case RoomType.LARGE_HALL:\n        return { width: 12, height: 12 };\n      case RoomType.BOSS:\n        return { width: 15, height: 15 };\n      case RoomType.STORAGE:\n        return { width: 5, height: 5 };\n      case RoomType.TREASURE:\n        return { width: 7, height: 7 };\n      case RoomType.ENTRANCE:\n        return { width: 8, height: 8 };\n      default:\n        return { width: 6, height: 6 };\n    }\n  }\n\n  setType(type) {\n    this.type = type;\n    // Apply type-specific properties\n    switch (type) {\n      case RoomType.TREASURE:\n        this.isLocked = true;\n        this.requiredKey = 'treasure_key';\n        break;\n      case RoomType.BOSS:\n        this.isLocked = true;\n        break;\n      case RoomType.ENTRANCE:\n        // Entrance should always be accessible\n        this.isLocked = false;\n        break;\n    }\n    return this;\n  }\n\n  // Generate a room of specific type\n  static generate(type, availableWidth, availableHeight, padding = 2) {\n    const minSize = Room.getMinSize(type);\n    let width, height;\n\n    switch (type) {\n      case RoomType.LARGE_HALL:\n        width = minSize.width + Math.floor(Math.random() * 4);\n        height = minSize.height + Math.floor(Math.random() * 4);\n        break;\n      case RoomType.BOSS:\n        width = minSize.width + Math.floor(Math.random() * 5);\n        height = minSize.height + Math.floor(Math.random() * 5);\n        break;\n      case RoomType.STORAGE:\n        width = minSize.width + Math.floor(Math.random() * 2);\n        height = minSize.height + Math.floor(Math.random() * 2);\n        break;\n      case RoomType.TREASURE:\n        width = minSize.width + Math.floor(Math.random() * 3);\n        height = minSize.height + Math.floor(Math.random() * 3);\n        break;\n      case RoomType.ENTRANCE:\n        width = minSize.width;\n        height = minSize.height;\n        break;\n      default: // STANDARD\n        width = minSize.width + Math.floor(Math.random() * 4);\n        height = minSize.height + Math.floor(Math.random() * 4);\n    }\n\n    // Ensure room fits in available space\n    width = Math.min(width, availableWidth - padding * 2);\n    height = Math.min(height, availableHeight - padding * 2);\n\n    // Position room\n    const x = padding + Math.floor(Math.random() * (availableWidth - width - padding * 2));\n    const y = padding + Math.floor(Math.random() * (availableHeight - height - padding * 2));\n\n    const room = new Room(x, y, width, height);\n    room.setType(type);\n    return room;\n  }\n}\n","// src/game/dungeon/RoomColors.js\n\nimport { RoomType } from './Room.js';\nexport const RoomColors = {\n  [RoomType.STANDARD]: '#444',    // Standard gray\n  [RoomType.ENTRANCE]: '#4a9',    // Teal\n  [RoomType.LARGE_HALL]: '#66a',  // Purple-blue\n  [RoomType.BOSS]: '#a44',        // Dark red\n  [RoomType.STORAGE]: '#974',     // Tan\n  [RoomType.TREASURE]: '#aa4',    // Gold\n  'corridor': '#335',             // Dark blue-gray\n  'wall': '#666',                 // Light gray\n  'door': {\n    'open': '#4a2',             // Green\n    'closed': '#8b4513'         // Brown\n  }\n};\n","// src/game/grid/GridCell.js\n\nexport class GridCell {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n    this.type = 'floor';\n    this.walkable = true;\n    this.transparent = true;\n    this.visible = false;\n    this.explored = false;\n    this.entities = new Set();\n    this.properties = new Map();\n    this.isDoor = false;\n    this.isOpen = false;\n  }\n\n  // Entity management\n  addEntity(entity) {\n    this.entities.add(entity);\n    return this;\n  }\n\n  removeEntity(entity) {\n    this.entities.delete(entity);\n    return this;\n  }\n\n  hasBlockingEntity() {\n    return Array.from(this.entities).some(entity => entity.blocking);\n  }\n\n  // Property management\n  setProperty(key, value) {\n    this.properties.set(key, value);\n    return this;\n  }\n\n  getProperty(key) {\n    return this.properties.get(key);\n  }\n\n  hasProperty(key) {\n    return this.properties.has(key);\n  }\n\n  // Cell type management\n  setType(type) {\n    this.type = type;\n\n    switch (type) {\n      case 'wall':\n        this.walkable = false;\n        this.transparent = false;\n        this.isDoor = false;\n        break;\n      case 'door':\n        this.isDoor = true;\n        this.isOpen = Math.random() < 0.2; // 20% chance to start open\n        this.walkable = this.isOpen;\n        this.transparent = this.isOpen;\n        break;\n      case 'floor':\n        this.walkable = true;\n        this.transparent = true;\n        this.isDoor = false;\n        break;\n      default:\n        console.warn(`Unknown cell type: ${type}`);\n    }\n  }\n\n  toggleDoor() {\n    if (!this.isDoor) return false;\n\n    this.isOpen = !this.isOpen;\n    this.walkable = this.isOpen;\n    this.transparent = this.isOpen;\n    return true;\n  }\n}\n","// src/game/grid/GridManager.js\n\nimport { GridCell } from './GridCell.js';\n\nexport class GridManager {\n  constructor(width, height, tileSize = 32) {\n    this.width = width;\n    this.height = height;\n    this.tileSize = tileSize;\n    this.grid = this.createGrid();\n  }\n\n  createGrid() {\n    const grid = new Array(this.height);\n    for (let y = 0; y < this.height; y++) {\n      grid[y] = new Array(this.width);\n      for (let x = 0; x < this.width; x++) {\n        grid[y][x] = new GridCell(x, y);\n      }\n    }\n    return grid;\n  }\n\n  isInBounds(x, y) {\n    return x >= 0 && x < this.width && y >= 0 && y < this.height;\n  }\n\n  getCell(x, y) {\n    if (!this.isInBounds(x, y)) return null;\n    return this.grid[y][x];\n  }\n\n  // Movement validation\n  canMoveTo(x, y) {\n    const cell = this.getCell(x, y);\n    if (!cell) return false;\n\n    // Check if it's a door and it's closed\n    if (cell.isDoor && !cell.isOpen) {\n      return false;\n    }\n\n    return cell.walkable && !cell.hasBlockingEntity();\n  }\n\n  // Coordinate conversion\n  gridToScreen(gridX, gridY) {\n    return {\n      x: gridX * this.tileSize,\n      y: gridY * this.tileSize\n    };\n  }\n\n  screenToGrid(screenX, screenY) {\n    return {\n      x: Math.floor(screenX / this.tileSize),\n      y: Math.floor(screenY / this.tileSize)\n    };\n  }\n\n  // Get all neighbors of a cell\n  getNeighbors(x, y, includeDiagonals = false) {\n    const neighbors = [];\n    const directions = [\n      { x: 0, y: -1 },  // Up\n      { x: 1, y: 0 },   // Right\n      { x: 0, y: 1 },   // Down\n      { x: -1, y: 0 }   // Left\n    ];\n\n    if (includeDiagonals) {\n      directions.push(\n        { x: 1, y: -1 },  // Up-Right\n        { x: 1, y: 1 },   // Down-Right\n        { x: -1, y: 1 },  // Down-Left\n        { x: -1, y: -1 }  // Up-Left\n      );\n    }\n\n    for (const dir of directions) {\n      const newX = x + dir.x;\n      const newY = y + dir.y;\n      const cell = this.getCell(newX, newY);\n      if (cell) neighbors.push(cell);\n    }\n\n    return neighbors;\n  }\n\n  // Get walkable neighbors (for pathfinding)\n  getWalkableNeighbors(x, y, includeDiagonals = false) {\n    return this.getNeighbors(x, y, includeDiagonals)\n      .filter(cell => this.canMoveTo(cell.x, cell.y));\n  }\n\n  // Line of sight check\n  hasLineOfSight(x1, y1, x2, y2) {\n    // Bresenham's line algorithm\n    const dx = Math.abs(x2 - x1);\n    const dy = Math.abs(y2 - y1);\n    const sx = x1 < x2 ? 1 : -1;\n    const sy = y1 < y2 ? 1 : -1;\n    let err = dx - dy;\n\n    let x = x1;\n    let y = y1;\n\n    while (true) {\n      if (x === x2 && y === y2) return true;\n\n      const cell = this.getCell(x, y);\n      if (!cell || !cell.transparent) return false;\n\n      const e2 = 2 * err;\n      if (e2 > -dy) {\n        err -= dy;\n        x += sx;\n      }\n      if (e2 < dx) {\n        err += dx;\n        y += sy;\n      }\n    }\n  }\n\n  // Get all cells within a certain range\n  getCellsInRange(centerX, centerY, range) {\n    const cells = [];\n    for (let y = centerY - range; y <= centerY + range; y++) {\n      for (let x = centerX - range; x <= centerX + range; x++) {\n        const cell = this.getCell(x, y);\n        if (cell) {\n          const distance = Math.sqrt(\n            Math.pow(x - centerX, 2) +\n            Math.pow(y - centerY, 2)\n          );\n          if (distance <= range) {\n            cells.push(cell);\n          }\n        }\n      }\n    }\n    return cells;\n  }\n\n  resetVisibility() {\n    for (let y = 0; y < this.height; y++) {\n      for (let x = 0; x < this.width; x++) {\n        this.grid[y][x].visible = false;\n      }\n    }\n  }\n\n  clear() {\n    this.grid = this.createGrid();\n  }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// src/game/index.js\n\nimport { GridManager } from './grid/GridManager.js';\nimport { DungeonGenerator } from './dungeon/DungeonGenerator.js';\nimport { Camera } from './Camera.js';\nimport { RoomType } from './dungeon/Room.js';\nimport { RoomColors } from './dungeon/RoomColors.js';\n\nclass GameManager {\n  constructor() {\n    console.log('GameManager initializing...');\n\n    try {\n      // Initialize canvas\n      this.canvas = document.getElementById('gameCanvas');\n      if (!this.canvas) {\n        throw new Error('Canvas element not found');\n      }\n\n      this.ctx = this.canvas.getContext('2d');\n      if (!this.ctx) {\n        throw new Error('Could not get 2D context');\n      }\n\n      // Constants\n      const GRID_WIDTH = 50;  // World size\n      const GRID_HEIGHT = 50;\n      const TILE_SIZE = 16;\n\n      // Set fixed canvas size (won't scale with window)\n      this.canvas.width = 800;   // Show 50 tiles at 16px each\n      this.canvas.height = 600;  // Show 37.5 tiles vertically\n\n      // Initialize camera\n      this.camera = new Camera(\n        this.canvas.width,\n        this.canvas.height,\n        GRID_WIDTH,\n        GRID_HEIGHT,\n        TILE_SIZE\n      );\n\n      // Initial canvas setup\n      this.ctx.imageSmoothingEnabled = false;\n\n      // Create grid system\n      this.gridManager = new GridManager(GRID_WIDTH, GRID_HEIGHT, TILE_SIZE);\n\n      // Create dungeon generator\n      this.dungeonGenerator = new DungeonGenerator(GRID_WIDTH, GRID_HEIGHT);\n\n      // Initialize room type tracking\n      this.roomTypes = new Map(); // Stores coordinates -> room type\n\n      // Set up game state\n      this.lastFrameTime = 0;\n      this.frameCount = 0;\n\n      // Player state\n      this.playerPos = { x: 0, y: 0 };\n      this.playerFacing = { x: 0, y: -1 }; // Initially facing north\n\n      // Generate initial dungeon and place player\n      this.generateNewDungeon();\n\n      // Bind event handlers\n      this.handleKeyDown = this.handleKeyDown.bind(this);\n\n      // Add key event listeners\n      window.addEventListener('keydown', (event) => {\n        if (event.code === 'Space') {\n          this.generateNewDungeon();\n          event.preventDefault();\n        } else {\n          this.handleKeyDown(event);\n        }\n      });\n\n      // Add legend\n      this.addLegend();\n\n      // Start game loop\n      console.log('Starting game loop...');\n      this.gameLoop(0);\n\n      // Hide loading screen\n      const loadingScreen = document.getElementById('loadingScreen');\n      if (loadingScreen) {\n        loadingScreen.classList.add('hidden');\n      }\n\n      // Add instructions\n      this.addInstructions();\n\n    } catch (error) {\n      console.error('Game initialization error:', error);\n      throw error;\n    }\n  }\n\n  addLegend() {\n    const legend = document.createElement('div');\n    legend.style.position = 'absolute';\n    legend.style.top = '10px';\n    legend.style.right = '10px';\n    legend.style.color = 'white';\n    legend.style.fontFamily = 'monospace';\n    legend.style.fontSize = '14px';\n    legend.style.backgroundColor = 'rgba(0, 0, 0, 0.7)';\n    legend.style.padding = '10px';\n    legend.style.borderRadius = '5px';\n\n    let legendHTML = '<div style=\"text-align: left; font-weight: bold;\">Room Types:</div>';\n\n    // Add each room type to the legend\n    Object.entries(RoomType).forEach(([key, value]) => {\n      const color = RoomColors[value];\n      legendHTML += `\n          <div style=\"display: flex; align-items: center; margin: 5px 0;\">\n              <div style=\"width: 20px; height: 20px; background-color: ${color}; margin-right: 10px; border: 1px solid #666;\"></div>\n              <span>${key.charAt(0) + key.slice(1).toLowerCase().replace('_', ' ')}</span>\n          </div>`;\n    });\n\n    // Add corridor\n    legendHTML += `\n      <div style=\"display: flex; align-items: center; margin: 5px 0;\">\n          <div style=\"width: 20px; height: 20px; background-color: ${RoomColors.corridor}; margin-right: 10px; border: 1px solid #666;\"></div>\n          <span>Corridor</span>\n      </div>`;\n\n    // Add doors\n    legendHTML += `\n      <div style=\"display: flex; align-items: center; margin: 5px 0;\">\n          <div style=\"width: 20px; height: 20px; background-color: ${RoomColors.door.closed}; margin-right: 10px; border: 1px solid #666;\"></div>\n          <span>Door (Closed)</span>\n      </div>\n      <div style=\"display: flex; align-items: center; margin: 5px 0;\">\n          <div style=\"width: 20px; height: 20px; background-color: ${RoomColors.door.open}; margin-right: 10px; border: 1px solid #666;\"></div>\n          <span>Door (Open)</span>\n      </div>`;\n\n    legend.innerHTML = legendHTML;\n    document.getElementById('gameContainer').appendChild(legend);\n  }\n\n  generateNewDungeon() {\n    /// Clear existing room type tracking\n    this.roomTypes.clear();\n\n    // Generate new dungeon layout\n    const dungeon = this.dungeonGenerator.generate();\n\n    // Store room types for each cell\n    for (const room of dungeon.rooms) {\n      for (let y = room.y; y < room.y + room.height; y++) {\n        for (let x = room.x; x < room.x + room.width; x++) {\n          this.roomTypes.set(`${x},${y}`, room.type);\n        }\n      }\n    }\n\n    // Store corridor locations\n    for (const corridor of dungeon.corridors) {\n      for (const point of corridor.path) {\n        this.roomTypes.set(`${point.x},${point.y}`, 'corridor');\n      }\n    }\n\n    // Clear existing grid\n    this.gridManager.clear();\n\n    // Apply dungeon to grid\n    for (let y = 0; y < dungeon.grid.length; y++) {\n      for (let x = 0; x < dungeon.grid[y].length; x++) {\n        const cell = this.gridManager.getCell(x, y);\n        switch (dungeon.grid[y][x]) {\n          case 0: // Empty\n            cell.setType('wall');\n            cell.walkable = false;\n            cell.transparent = false;\n            break;\n          case 1: // Floor\n            cell.setType('floor');\n            cell.walkable = true;\n            cell.transparent = true;\n            break;\n          case 2: // Door\n            cell.setType('door');\n            cell.walkable = true;\n            cell.transparent = false;\n            break;\n          case 3: // Wall\n            cell.setType('wall');\n            cell.walkable = false;\n            cell.transparent = false;\n            break;\n        }\n      }\n    }\n\n    // Place player in a valid position\n    this.placePlayerInDungeon();\n\n    // Reset camera to follow player\n    this.camera.follow(this.playerPos.x, this.playerPos.y);\n\n    // Update initial visibility\n    this.updateVisibility();\n  }\n\n  placePlayerInDungeon() {\n    // Find first walkable cell\n    for (let y = 0; y < this.gridManager.height; y++) {\n      for (let x = 0; x < this.gridManager.width; x++) {\n        if (this.gridManager.canMoveTo(x, y)) {\n          this.playerPos = { x, y };\n          return;\n        }\n      }\n    }\n  }\n\n  updateVisibility() {\n    this.gridManager.resetVisibility();\n    const visibleCells = this.gridManager.getCellsInRange(this.playerPos.x, this.playerPos.y, 5);\n    for (const cell of visibleCells) {\n      if (this.gridManager.hasLineOfSight(this.playerPos.x, this.playerPos.y, cell.x, cell.y)) {\n        cell.visible = true;\n        cell.explored = true;\n      }\n    }\n  }\n\n  addInstructions() {\n    const instructions = document.createElement('div');\n    instructions.style.position = 'absolute';\n    instructions.style.top = '10px';\n    instructions.style.left = '10px';\n    instructions.style.color = 'white';\n    instructions.style.fontFamily = 'monospace';\n    instructions.style.fontSize = '14px';\n    instructions.style.backgroundColor = 'rgba(0, 0, 0, 0.7)';\n    instructions.style.padding = '10px';\n    instructions.style.borderRadius = '5px';\n    instructions.innerHTML = 'Arrow Keys: Move<br>E: Open/Close Door<br>Space: Generate New Dungeon';\n    document.getElementById('gameContainer').appendChild(instructions);\n  }\n\n  handleKeyDown(event) {\n    if (event.code === 'KeyE') {\n      this.tryToggleDoorInFacingDirection();\n      event.preventDefault();\n      return;\n    }\n\n    let newX = this.playerPos.x;\n    let newY = this.playerPos.y;\n    let newFacingX = 0;\n    let newFacingY = 0;\n\n    // Determine facing direction based on key\n    switch (event.code) {\n      case 'ArrowUp':\n        newY--;\n        newFacingX = 0;\n        newFacingY = -1;\n        break;\n      case 'ArrowDown':\n        newY++;\n        newFacingX = 0;\n        newFacingY = 1;\n        break;\n      case 'ArrowLeft':\n        newX--;\n        newFacingX = -1;\n        newFacingY = 0;\n        break;\n      case 'ArrowRight':\n        newX++;\n        newFacingX = 1;\n        newFacingY = 0;\n        break;\n      default:\n        return;\n    }\n\n    // Always update facing direction\n    this.playerFacing.x = newFacingX;\n    this.playerFacing.y = newFacingY;\n\n    // Attempt movement if possible\n    if (this.gridManager.canMoveTo(newX, newY)) {\n      this.playerPos.x = newX;\n      this.playerPos.y = newY;\n      this.camera.follow(this.playerPos.x, this.playerPos.y);\n      this.updateVisibility();\n    }\n\n    event.preventDefault();\n  }\n\n  tryToggleDoorInFacingDirection() {\n    const facingX = this.playerPos.x + this.playerFacing.x;\n    const facingY = this.playerPos.y + this.playerFacing.y;\n\n    const facingCell = this.gridManager.getCell(facingX, facingY);\n    if (facingCell && facingCell.isDoor) {\n      if (facingCell.toggleDoor()) {\n        this.updateVisibility();\n        return true;\n      }\n    }\n    return false;\n  }\n\n\n  renderGrid() {\n    const { width, height, tileSize } = this.gridManager;\n\n    for (let y = 0; y < height; y++) {\n      for (let x = 0; x < width; x++) {\n        if (!this.camera.isVisible(x, y)) continue;\n\n        const cell = this.gridManager.getCell(x, y);\n        if (!cell.explored) continue;\n\n        const screenPos = this.camera.worldToScreen(x, y);\n        let fillColor = '#333';\n\n        if (!cell.visible) {\n          fillColor = '#1a1a1a';\n        } else {\n          const roomType = this.roomTypes.get(`${x},${y}`);\n          switch (cell.type) {\n            case 'wall':\n              fillColor = RoomColors.wall;\n              break;\n            case 'door':\n              fillColor = cell.isOpen ? RoomColors.door.open : RoomColors.door.closed;\n              break;\n            case 'floor':\n              if (roomType === 'corridor') {\n                fillColor = RoomColors.corridor;\n              } else {\n                fillColor = RoomColors[roomType] || RoomColors[RoomType.STANDARD];\n              }\n              break;\n          }\n        }\n\n        this.ctx.fillStyle = fillColor;\n        this.ctx.fillRect(screenPos.x, screenPos.y, tileSize, tileSize);\n\n        if (cell.visible) {\n          this.ctx.strokeStyle = '#222';\n          this.ctx.strokeRect(screenPos.x, screenPos.y, tileSize, tileSize);\n        }\n      }\n    }\n  }\n\n  renderPlayer() {\n    const screenPos = this.camera.worldToScreen(this.playerPos.x, this.playerPos.y);\n    const tileSize = this.gridManager.tileSize;\n\n    // Draw player base\n    this.ctx.fillStyle = '#ff0';\n    this.ctx.fillRect(\n      screenPos.x + 2,\n      screenPos.y + 2,\n      tileSize - 4,\n      tileSize - 4\n    );\n\n    // Draw direction indicator\n    this.ctx.fillStyle = '#f00';\n    const indicatorSize = tileSize / 3;\n    const centerX = screenPos.x + tileSize / 2;\n    const centerY = screenPos.y + tileSize / 2;\n\n    const indicatorX = centerX + (this.playerFacing.x * (tileSize / 4));\n    const indicatorY = centerY + (this.playerFacing.y * (tileSize / 4));\n\n    this.ctx.beginPath();\n    this.ctx.arc(indicatorX, indicatorY, indicatorSize / 2, 0, Math.PI * 2);\n    this.ctx.fill();\n  }\n\n  gameLoop(timestamp) {\n    try {\n      const deltaTime = timestamp - this.lastFrameTime;\n      this.lastFrameTime = timestamp;\n\n      this.ctx.fillStyle = '#000';\n      this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n\n      this.renderGrid();\n      this.renderPlayer();\n\n      this.ctx.fillStyle = '#fff';\n      this.ctx.font = '12px monospace';\n      this.ctx.fillText(`FPS: ${Math.round(1000 / deltaTime)}`, 10, this.canvas.height - 20);\n      this.ctx.fillText(`Pos: (${this.playerPos.x}, ${this.playerPos.y})`, 10, this.canvas.height - 8);\n\n      this.frameCount++;\n      requestAnimationFrame(this.gameLoop.bind(this));\n    } catch (error) {\n      console.error('Game loop error:', error);\n      throw error;\n    }\n  }\n}\n\n// Initialize game when the window loads\nconsole.log('Game script loaded, waiting for window load');\nwindow.addEventListener('load', () => {\n  console.log('Window loaded, initializing game');\n  try {\n    window.game = new GameManager();\n  } catch (error) {\n    console.error('Failed to initialize game:', error);\n  }\n});\n\nexport default GameManager;\n"],"names":["Camera","width","height","worldWidth","worldHeight","tileSize","_classCallCheck","x","y","tilesX","Math","floor","tilesY","scrollThreshold","_createClass","key","value","follow","targetX","targetY","screenX","screenY","max","min","worldToScreen","worldX","worldY","isVisible","screenPos","Corridor","startX","startY","endX","endY","type","path","generatePath","currentX","currentY","push","Room","DungeonGenerator","rooms","corridors","grid","Array","fill","map","generate","_this","generateRooms","connectRooms","applyToGrid","attempts","arguments","length","undefined","i","minSize","maxSize","random","newRoom","overlaps","_iterator","_createForOfIteratorHelper","_step","s","n","done","room","intersects","err","e","f","sortedRooms","_toConsumableArray","sort","a","b","roomA","roomB","createSingleCorridor","_this2","startPoint","findBestExitPoint","endPoint","corridor","filter","point","isPointInAnyRoom","startDoor","findDoorPoint","endDoor","forEach","targetRoom","roomCenter","getCenter","targetCenter","corridorPoint","adjacentPoints","_i","_adjacentPoints","isPointInRoom","mergeIntersectingCorridors","merged","used","Set","has","currentCorridor","_objectSpread","add","mergedAny","j","doCorridorsIntersect","mergeTwoCorridors","corridorA","corridorB","some","pointA","pointB","allPoints","concat","p","mergedPath","from","str","_str$split$map","split","Number","_str$split$map2","_slicedToArray","findValidDoorPointsForMergedCorridor","_this3","doorPoints","connectedRoom","findConnectedRoom","isValidDoorLocation","find","corridorPath","_this4","isAtBoundary","neighbors","getAdjacentPoints","hasCorridorConnection","createCorridorBetweenRooms","_this5","findClosestDoorPoint","findBestConnection","_this6","strategies","dx","dy","_i2","_strategies","_strategies$_i","findConnectionPoint","isValidCorridor","getDoorPoints","offsetX","offsetY","_iterator2","_step2","_iterator3","_step3","neighbor","findDoorPlacementPoints","startSegment","slice","validStart","isValidDoorPlacement","endSegment","validEnd","centerA","centerB","deltas","_i3","_deltas","_deltas$_i","isInBounds","start","end","isAdjacentToRoom","neighboringCells","corridorNeighbors","cell","assignRoomTypes","setType","RoomType","LARGE_HALL","topLeftRoom","reduce","closest","distance","sqrt","ENTRANCE","farthestRoom","farthest","pow","BOSS","remainingTypes","STORAGE","TREASURE","STANDARD","randomType","_iterator4","_step4","_iterator5","_step5","_iterator6","_step6","tempGrid","row","hasAdjacentFloor","console","log","placeDoors","_iterator7","_step7","shouldPlaceDoor","nx","ny","horizontalDoor","verticalDoor","doors","features","Map","isLocked","requiredKey","contents","other","padding","getBounds","left","right","top","bottom","addDoor","getMinSize","availableWidth","availableHeight","RoomColors","_defineProperty","GridCell","walkable","transparent","visible","explored","entities","properties","isDoor","isOpen","addEntity","entity","removeEntity","hasBlockingEntity","blocking","setProperty","set","getProperty","get","hasProperty","warn","toggleDoor","GridManager","createGrid","getCell","canMoveTo","gridToScreen","gridX","gridY","screenToGrid","getNeighbors","includeDiagonals","directions","_directions","dir","newX","newY","getWalkableNeighbors","hasLineOfSight","x1","y1","x2","y2","abs","sx","sy","e2","getCellsInRange","centerX","centerY","range","cells","resetVisibility","clear","GameManager","canvas","document","getElementById","Error","ctx","getContext","GRID_WIDTH","GRID_HEIGHT","TILE_SIZE","camera","imageSmoothingEnabled","gridManager","dungeonGenerator","roomTypes","lastFrameTime","frameCount","playerPos","playerFacing","generateNewDungeon","handleKeyDown","bind","window","addEventListener","event","code","preventDefault","addLegend","gameLoop","loadingScreen","classList","addInstructions","error","legend","createElement","style","position","color","fontFamily","fontSize","backgroundColor","borderRadius","legendHTML","Object","entries","_ref","_ref2","charAt","toLowerCase","replace","door","closed","open","innerHTML","appendChild","dungeon","placePlayerInDungeon","updateVisibility","visibleCells","instructions","tryToggleDoorInFacingDirection","newFacingX","newFacingY","facingX","facingY","facingCell","renderGrid","_this$gridManager","fillColor","roomType","wall","fillStyle","fillRect","strokeStyle","strokeRect","renderPlayer","indicatorSize","indicatorX","indicatorY","beginPath","arc","PI","timestamp","deltaTime","font","fillText","round","requestAnimationFrame","game"],"sourceRoot":""}