{"version":3,"file":"game.js","mappings":"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","sources":["webpack://devcrawler/./src/game/Camera.js","webpack://devcrawler/./src/game/dungeon/Corridor.js","webpack://devcrawler/./src/game/dungeon/DungeonGenerator.js","webpack://devcrawler/./src/game/dungeon/Room.js","webpack://devcrawler/./src/game/dungeon/RoomColors.js","webpack://devcrawler/./src/game/grid/GridCell.js","webpack://devcrawler/./src/game/grid/GridManager.js","webpack://devcrawler/webpack/bootstrap","webpack://devcrawler/webpack/runtime/define property getters","webpack://devcrawler/webpack/runtime/hasOwnProperty shorthand","webpack://devcrawler/webpack/runtime/make namespace object","webpack://devcrawler/./src/game/index.js"],"sourcesContent":["export class Camera {\n  constructor(width, height, worldWidth, worldHeight, tileSize) {\n    this.width = width;\n    this.height = height;\n    this.worldWidth = worldWidth;\n    this.worldHeight = worldHeight;\n    this.tileSize = tileSize;\n    this.x = 0;\n    this.y = 0;\n\n    // Calculate the number of tiles that can be displayed\n    this.tilesX = Math.floor(width / tileSize);\n    this.tilesY = Math.floor(height / tileSize);\n\n    // Scroll threshold in tiles (5 tiles from edge)\n    this.scrollThreshold = 5;\n  }\n\n  // Update camera position based on target (player) position\n  follow(targetX, targetY) {\n    // Convert target position to screen space\n    const screenX = (targetX * this.tileSize) - this.x;\n    const screenY = (targetY * this.tileSize) - this.y;\n\n    // Check if target is too close to screen edges\n    if (screenX < this.scrollThreshold * this.tileSize) {\n      this.x = (targetX * this.tileSize) - (this.scrollThreshold * this.tileSize);\n    }\n    if (screenX > this.width - (this.scrollThreshold * this.tileSize)) {\n      this.x = (targetX * this.tileSize) - this.width + (this.scrollThreshold * this.tileSize);\n    }\n    if (screenY < this.scrollThreshold * this.tileSize) {\n      this.y = (targetY * this.tileSize) - (this.scrollThreshold * this.tileSize);\n    }\n    if (screenY > this.height - (this.scrollThreshold * this.tileSize)) {\n      this.y = (targetY * this.tileSize) - this.height + (this.scrollThreshold * this.tileSize);\n    }\n\n    // Clamp camera position to world bounds\n    this.x = Math.max(0, Math.min(this.x, (this.worldWidth * this.tileSize) - this.width));\n    this.y = Math.max(0, Math.min(this.y, (this.worldHeight * this.tileSize) - this.height));\n  }\n\n  // Convert world coordinates to screen coordinates\n  worldToScreen(worldX, worldY) {\n    return {\n      x: (worldX * this.tileSize) - this.x,\n      y: (worldY * this.tileSize) - this.y\n    };\n  }\n\n  // Check if a tile is visible on screen\n  isVisible(worldX, worldY) {\n    const screenPos = this.worldToScreen(worldX, worldY);\n    return screenPos.x >= -this.tileSize &&\n      screenPos.x <= this.width &&\n      screenPos.y >= -this.tileSize &&\n      screenPos.y <= this.height;\n  }\n}\n","export class Corridor {\n  constructor(startX, startY, endX, endY) {\n    this.startX = startX;\n    this.startY = startY;\n    this.endX = endX;\n    this.endY = endY;\n    this.type = 'corridor';\n    this.path = [];\n    this.generatePath();\n  }\n\n  generatePath() {\n    this.path = [];\n    let currentX = this.startX;\n    let currentY = this.startY;\n\n    // Always go horizontal first, then vertical\n    // This creates more predictable corridors\n    while (currentX !== this.endX) {\n      currentX += currentX < this.endX ? 1 : -1;\n      this.path.push({ x: currentX, y: currentY });\n    }\n\n    while (currentY !== this.endY) {\n      currentY += currentY < this.endY ? 1 : -1;\n      this.path.push({ x: currentX, y: currentY });\n    }\n  }\n}\n","// src/game/dungeon/DungeonGenerator.js\n\nimport { Room } from './Room.js';\nimport { Corridor } from './Corridor.js';\n\nexport const RoomType = {\n  STANDARD: 'standard',\n  ENTRANCE: 'entrance',\n  LARGE_HALL: 'largeHall',\n  BOSS: 'boss',\n  STORAGE: 'storage',\n  TREASURE: 'treasure'\n};\n\nexport class DungeonGenerator {\n  constructor(width, height) {\n    this.width = width;\n    this.height = height;\n    this.rooms = [];\n    this.corridors = [];\n    this.grid = Array(height).fill().map(() => Array(width).fill(0));\n  }\n\n  generate() {\n    const maxAttempts = 5;\n    let attempts = 0;\n\n    while (attempts < maxAttempts) {\n      this.rooms = [];\n      this.corridors = [];\n      this.grid = Array(this.height).fill().map(() => Array(this.width).fill(0));\n\n      if (this.generateRooms()) {\n        this.connectRooms();\n        this.assignRoomTypes();\n        this.applyToGrid();\n\n        return {\n          grid: this.grid,\n          rooms: this.rooms,\n          corridors: this.corridors\n        };\n      }\n\n      attempts++;\n    }\n\n    throw new Error('Failed to generate dungeon with minimum required rooms after multiple attempts');\n  }\n\n  generateRooms() {\n    const minRooms = 5;\n    const maxRooms = 10;\n    const maxAttempts = 200;\n    let totalAttempts = 0;\n\n    // Clear any existing rooms\n    this.rooms = [];\n\n    // Define minimum and maximum room sizes\n    const minSize = 4;  // Smaller minimum size\n    const maxSize = 6;  // Smaller maximum size\n\n    // Calculate grid divisions for better room distribution\n    const gridDivisions = 3;\n    const sectionWidth = Math.floor((this.width - 10) / gridDivisions);  // More padding\n    const sectionHeight = Math.floor((this.height - 10) / gridDivisions); // More padding\n\n    // Place entrance room in top-left section\n    const entranceMinSize = Room.getMinSize(RoomType.ENTRANCE);\n    const entranceRoom = new Room(2, 2, entranceMinSize.width, entranceMinSize.height);\n    entranceRoom.setType(RoomType.ENTRANCE);\n    this.rooms.push(entranceRoom);\n\n    // Create sections, excluding the entrance section\n    const sections = [];\n    for (let y = 0; y < gridDivisions; y++) {\n      for (let x = 0; x < gridDivisions; x++) {\n        sections.push({ x, y }); // Include all sections for more placement opportunities\n      }\n    }\n\n    // Shuffle sections for random placement order\n    sections.sort(() => Math.random() - 0.5);\n\n    // First phase: Try to place at least one room in each section\n    for (const section of sections) {\n      if (this.rooms.length >= maxRooms) break;\n\n      let placed = false;\n      let sectionAttempts = 0;\n      const maxSectionAttempts = 20; // Increased attempts per section\n\n      while (!placed && sectionAttempts < maxSectionAttempts) {\n        const width = minSize + Math.floor(Math.random() * (Math.min(maxSize, sectionWidth - 4) - minSize));\n        const height = minSize + Math.floor(Math.random() * (Math.min(maxSize, sectionHeight - 4) - minSize));\n\n        const sectionX = 2 + (section.x * sectionWidth);\n        const sectionY = 2 + (section.y * sectionHeight);\n\n        // Add some randomness to room placement within section\n        const x = sectionX + 2 + Math.floor(Math.random() * (sectionWidth - width - 4));\n        const y = sectionY + 2 + Math.floor(Math.random() * (sectionHeight - height - 4));\n\n        const newRoom = new Room(x, y, width, height);\n\n        // Skip if trying to place in entrance section and not the entrance room\n        if (section.x === 0 && section.y === 0 && !newRoom.type) {\n          sectionAttempts++;\n          continue;\n        }\n\n        if (this.canPlaceRoom(newRoom)) {\n          this.rooms.push(newRoom);\n          placed = true;\n        }\n\n        sectionAttempts++;\n        totalAttempts++;\n      }\n    }\n\n    // Second phase: Keep trying to add rooms until we reach minRooms\n    while (this.rooms.length < minRooms && totalAttempts < maxAttempts) {\n      const width = minSize + Math.floor(Math.random() * (maxSize - minSize));\n      const height = minSize + Math.floor(Math.random() * (maxSize - minSize));\n\n      // Try to place room in any valid location\n      const x = 2 + Math.floor(Math.random() * (this.width - width - 4));\n      const y = 2 + Math.floor(Math.random() * (this.height - height - 4));\n\n      const newRoom = new Room(x, y, width, height);\n\n      if (this.canPlaceRoom(newRoom)) {\n        this.rooms.push(newRoom);\n      }\n\n      totalAttempts++;\n    }\n\n    // If we still don't have minimum rooms, try one last time with smaller rooms\n    if (this.rooms.length < minRooms) {\n      for (let i = 0; i < 20 && this.rooms.length < minRooms; i++) {\n        const width = 4;  // Minimum size\n        const height = 4; // Minimum size\n        const x = 2 + Math.floor(Math.random() * (this.width - width - 4));\n        const y = 2 + Math.floor(Math.random() * (this.height - height - 4));\n\n        const newRoom = new Room(x, y, width, height);\n        if (this.canPlaceRoom(newRoom)) {\n          this.rooms.push(newRoom);\n        }\n      }\n    }\n\n    if (this.rooms.length < minRooms) {\n      console.error(`Failed to generate minimum number of rooms. Got ${this.rooms.length}, needed ${minRooms}`);\n      return false;\n    }\n\n    return true;\n  }\n\n  canPlaceRoom(newRoom) {\n    // Check bounds\n    if (!this.isRoomInBounds(newRoom)) {\n      return false;\n    }\n\n    // Check overlaps with existing rooms (including padding)\n    for (const room of this.rooms) {\n      if (newRoom.intersects(room, 2)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  isRoomInBounds(room) {\n    return room.x >= 1 &&\n      room.y >= 1 &&\n      room.x + room.width < this.width - 1 &&\n      room.y + room.height < this.height - 1;\n  }\n\n  connectRooms() {\n    const sortedRooms = [...this.rooms].sort((a, b) => a.x - b.x);\n\n    for (let i = 0; i < sortedRooms.length - 1; i++) {\n      const roomA = sortedRooms[i];\n      const roomB = sortedRooms[i + 1];\n\n      // Connect the rooms with a single corridor\n      this.createSingleCorridor(roomA, roomB);\n    }\n  }\n\n  createSingleCorridor(roomA, roomB) {\n    const startPoint = this.findBestExitPoint(roomA, roomB);\n    const endPoint = this.findBestExitPoint(roomB, roomA);\n\n    // Create the corridor\n    const corridor = new Corridor(startPoint.x, startPoint.y, endPoint.x, endPoint.y);\n\n    // Remove points that are inside rooms\n    corridor.path = corridor.path.filter(point =>\n      !this.isPointInAnyRoom(point.x, point.y)\n    );\n\n    // Only proceed if corridor is long enough\n    if (corridor.path.length < 4) return;\n\n    // Find the actual intersection points with rooms\n    const startDoor = this.findDoorPoint(corridor.path[0], roomA);\n    const endDoor = this.findDoorPoint(corridor.path[corridor.path.length - 1], roomB);\n\n    if (!startDoor || !endDoor) return;\n\n    // Add the corridor to the grid\n    corridor.path.forEach(point => {\n      this.grid[point.y][point.x] = 1; // floor\n    });\n\n    // Add the doors\n    this.grid[startDoor.y][startDoor.x] = 2; // door\n    this.grid[endDoor.y][endDoor.x] = 2; // door\n\n    this.corridors.push(corridor);\n  }\n\n  findBestExitPoint(room, targetRoom) {\n    const roomCenter = room.getCenter();\n    const targetCenter = targetRoom.getCenter();\n\n    // Determine which edge to use\n    let x = roomCenter.x < targetCenter.x ?\n      room.x + room.width : // Use right edge\n      room.x;               // Use left edge\n\n    let y = roomCenter.y < targetCenter.y ?\n      room.y + room.height : // Use bottom edge\n      room.y;                // Use top edge\n\n    // Stay within room bounds\n    x = Math.max(room.x, Math.min(x, room.x + room.width));\n    y = Math.max(room.y, Math.min(y, room.y + room.height));\n\n    return { x, y };\n  }\n\n  findDoorPoint(corridorPoint, room) {\n    // Check if the point is adjacent to the room\n    const adjacentPoints = [\n      { x: corridorPoint.x - 1, y: corridorPoint.y },\n      { x: corridorPoint.x + 1, y: corridorPoint.y },\n      { x: corridorPoint.x, y: corridorPoint.y - 1 },\n      { x: corridorPoint.x, y: corridorPoint.y + 1 }\n    ];\n\n    // Find the point that intersects with the room\n    for (const point of adjacentPoints) {\n      if (this.isPointInRoom(point, room)) {\n        return corridorPoint; // The corridor point becomes the door\n      }\n    }\n\n    return null;\n  }\n\n  isPointInRoom(point, room) {\n    return point.x >= room.x &&\n      point.x < room.x + room.width &&\n      point.y >= room.y &&\n      point.y < room.y + room.height;\n  }\n\n  mergeIntersectingCorridors(corridors) {\n    const merged = [];\n    const used = new Set();\n\n    for (let i = 0; i < corridors.length; i++) {\n      if (used.has(i)) continue;\n\n      let currentCorridor = { ...corridors[i] };\n      used.add(i);\n\n      let mergedAny;\n      do {\n        mergedAny = false;\n        for (let j = 0; j < corridors.length; j++) {\n          if (used.has(j)) continue;\n\n          if (this.doCorridorsIntersect(currentCorridor, corridors[j])) {\n            currentCorridor = this.mergeTwoCorridors(currentCorridor, corridors[j]);\n            used.add(j);\n            mergedAny = true;\n          }\n        }\n      } while (mergedAny);\n\n      merged.push(currentCorridor);\n    }\n\n    return merged;\n  }\n\n  doCorridorsIntersect(corridorA, corridorB) {\n    return corridorA.path.some(pointA =>\n      corridorB.path.some(pointB =>\n        pointA.x === pointB.x && pointA.y === pointB.y));\n  }\n\n  mergeTwoCorridors(corridorA, corridorB) {\n    // Create a set of all points to remove duplicates\n    const allPoints = new Set(\n      [...corridorA.path, ...corridorB.path].map(p => `${p.x},${p.y}`)\n    );\n\n    // Convert back to array of point objects\n    const mergedPath = Array.from(allPoints).map(str => {\n      const [x, y] = str.split(',').map(Number);\n      return { x, y };\n    });\n\n    return {\n      path: mergedPath,\n      type: 'corridor'\n    };\n  }\n\n  findValidDoorPointsForMergedCorridor(corridor) {\n    const doorPoints = [];\n\n    // For each point in the corridor\n    corridor.path.forEach(point => {\n      // Check if this point connects to any room\n      const connectedRoom = this.findConnectedRoom(point);\n      if (connectedRoom) {\n        // Verify this is a valid door location\n        if (this.isValidDoorLocation(point, corridor.path, connectedRoom)) {\n          doorPoints.push(point);\n        }\n      }\n    });\n\n    return doorPoints;\n  }\n\n  findConnectedRoom(point) {\n    return this.rooms.find(room =>\n      point.x >= room.x - 1 && point.x <= room.x + room.width &&\n      point.y >= room.y - 1 && point.y <= room.y + room.height\n    );\n  }\n\n  isValidDoorLocation(point, corridorPath, room) {\n    // Must be exactly at the room boundary\n    const isAtBoundary =\n      (point.x === room.x - 1 && point.y >= room.y && point.y < room.y + room.height) ||\n      (point.x === room.x + room.width && point.y >= room.y && point.y < room.y + room.height) ||\n      (point.y === room.y - 1 && point.x >= room.x && point.x < room.x + room.width) ||\n      (point.y === room.y + room.height && point.x >= room.x && point.x < room.x + room.width);\n\n    if (!isAtBoundary) return false;\n\n    // Check that there's actual corridor (not just another room) on the other side\n    const neighbors = this.getAdjacentPoints(point);\n    const hasCorridorConnection = neighbors.some(n =>\n      corridorPath.some(p => p.x === n.x && p.y === n.y) &&\n      !this.isPointInAnyRoom(n.x, n.y)\n    );\n\n    return hasCorridorConnection;\n  }\n\n  createCorridorBetweenRooms(roomA, roomB) {\n    const startPoint = this.findClosestDoorPoint(roomA, roomB);\n    const endPoint = this.findClosestDoorPoint(roomB, roomA);\n\n    const corridor = new Corridor(startPoint.x, startPoint.y, endPoint.x, endPoint.y);\n    corridor.path = corridor.path.filter(point => !this.isPointInAnyRoom(point.x, point.y));\n\n    return corridor.path.length >= 4 ? corridor : null;\n  }\n\n\n  findBestConnection(roomA, roomB) {\n    // Try different connection strategies\n    const strategies = [\n      { dx: 0, dy: 0 },    // Direct\n      { dx: 0, dy: 1 },    // Offset up\n      { dx: 0, dy: -1 },   // Offset down\n      { dx: 1, dy: 0 },    // Offset right\n      { dx: -1, dy: 0 }    // Offset left\n    ];\n\n    for (const { dx, dy } of strategies) {\n      // Find potential connection points\n      const startPoint = this.findConnectionPoint(roomA, roomB, dx, dy);\n      const endPoint = this.findConnectionPoint(roomB, roomA, -dx, -dy);\n\n      // Create and validate corridor\n      const corridor = new Corridor(startPoint.x, startPoint.y, endPoint.x, endPoint.y);\n\n      // Remove room intersections\n      corridor.path = corridor.path.filter(point =>\n        !this.isPointInAnyRoom(point.x, point.y));\n\n      // Validate corridor\n      if (corridor.path.length >= 4 && this.isValidCorridor(corridor)) {\n        // Find door placement points\n        const doorPoints = this.getDoorPoints(corridor, roomA, roomB);\n        if (doorPoints.length === 2) { // Ensure exactly two doors\n          return { corridor, doorPoints };\n        }\n      }\n    }\n    return null;\n  }\n\n  findConnectionPoint(room, targetRoom, offsetX, offsetY) {\n    const roomCenter = room.getCenter();\n    const targetCenter = targetRoom.getCenter();\n\n    // Determine which edge to use based on relative position\n    let x, y;\n\n    if (roomCenter.x < targetCenter.x) {\n      x = room.x + room.width - 1; // Right edge\n    } else {\n      x = room.x; // Left edge\n    }\n\n    if (roomCenter.y < targetCenter.y) {\n      y = room.y + room.height - 1; // Bottom edge\n    } else {\n      y = room.y; // Top edge\n    }\n\n    // Apply offset\n    x += offsetX;\n    y += offsetY;\n\n    return { x, y };\n  }\n\n  isValidCorridor(corridor) {\n    // Check minimum length\n    if (corridor.path.length < 4) return false;\n\n    // Check for nearby doors or other corridors\n    for (const point of corridor.path) {\n      const neighbors = this.getAdjacentPoints(point);\n      for (const neighbor of neighbors) {\n        // Check if neighbor is a door or part of another corridor\n        if (this.grid[neighbor.y][neighbor.x] === 2) return false;\n      }\n    }\n\n    return true;\n  }\n\n  findDoorPlacementPoints(corridor) {\n    const doorPoints = [];\n\n    // Check start of corridor\n    const startSegment = corridor.path.slice(0, 3);\n    const validStart = this.isValidDoorPlacement(startSegment[1], corridor);\n    if (validStart) {\n      doorPoints.push(startSegment[1]);\n    }\n\n    // Check end of corridor\n    const endSegment = corridor.path.slice(-3);\n    const validEnd = this.isValidDoorPlacement(endSegment[1], corridor);\n    if (validEnd) {\n      doorPoints.push(endSegment[1]);\n    }\n\n    return doorPoints;\n  }\n\n  findClosestDoorPoint(roomA, roomB) {\n    // Find the edge of roomA that's closest to roomB\n    const centerA = roomA.getCenter();\n    const centerB = roomB.getCenter();\n\n    let x, y;\n\n    if (centerA.x < centerB.x) {\n      x = roomA.x + roomA.width - 1; // Right edge\n    } else {\n      x = roomA.x; // Left edge\n    }\n\n    if (centerA.y < centerB.y) {\n      y = roomA.y + roomA.height - 1; // Bottom edge\n    } else {\n      y = roomA.y; // Top edge\n    }\n\n    return { x, y };\n  }\n\n  isPointInAnyRoom(x, y) {\n    return this.rooms.some(room =>\n      x >= room.x && x < room.x + room.width &&\n      y >= room.y && y < room.y + room.height\n    );\n  }\n\n  getAdjacentPoints(point) {\n    const neighbors = [];\n    const deltas = [[-1, 0], [1, 0], [0, -1], [0, 1]];\n\n    for (const [dx, dy] of deltas) {\n      const x = point.x + dx;\n      const y = point.y + dy;\n      if (this.isInBounds(x, y)) {\n        neighbors.push({ x, y });\n      }\n    }\n\n    return neighbors;\n  }\n\n  getDoorPoints(corridor, roomA, roomB) {\n    const doorPoints = [];\n\n    // Check first and last points of corridor\n    const start = corridor.path[0];\n    const end = corridor.path[corridor.path.length - 1];\n\n    // Only add door points that are actually connecting to rooms\n    if (this.isAdjacentToRoom(start, roomA)) doorPoints.push(start);\n    if (this.isAdjacentToRoom(end, roomB)) doorPoints.push(end);\n\n    return doorPoints;\n  }\n\n  isAdjacentToRoom(point, room) {\n    return point.x >= room.x - 1 &&\n      point.x <= room.x + room.width &&\n      point.y >= room.y - 1 &&\n      point.y <= room.y + room.height;\n  }\n\n  isValidDoorPlacement(point, corridor) {\n    // Check if there's enough space around the door\n    const neighboringCells = [\n      { x: point.x - 1, y: point.y },\n      { x: point.x + 1, y: point.y },\n      { x: point.x, y: point.y - 1 },\n      { x: point.x, y: point.y + 1 }\n    ];\n\n    // Count how many corridor cells are adjacent\n    const corridorNeighbors = neighboringCells.filter(cell =>\n      corridor.path.some(p => p.x === cell.x && p.y === cell.y)\n    );\n\n    // Only place door if it connects exactly two spaces\n    // (one corridor side and one room side)\n    return corridorNeighbors.length === 1;\n  }\n\n  assignRoomTypes() {\n    // Sort rooms by size (excluding the entrance room which is already assigned)\n    const sortedRooms = [...this.rooms]\n      .filter(room => room.type !== RoomType.ENTRANCE)\n      .sort((a, b) => (b.width * b.height) - (a.width * a.height));\n\n    // Assign types based on size and position\n    sortedRooms[0].setType(RoomType.LARGE_HALL);\n\n    // Find the room farthest from entrance for boss\n    const entranceRoom = this.rooms.find(room => room.type === RoomType.ENTRANCE);\n    const farthestRoom = sortedRooms.reduce((farthest, room) => {\n      if (room.type === RoomType.LARGE_HALL) return farthest;\n      const distance = Math.sqrt(\n        Math.pow(room.x - entranceRoom.x, 2) +\n        Math.pow(room.y - entranceRoom.y, 2)\n      );\n      if (!farthest || distance > Math.sqrt(\n        Math.pow(farthest.x - entranceRoom.x, 2) +\n        Math.pow(farthest.y - entranceRoom.y, 2)\n      )) {\n        return room;\n      }\n      return farthest;\n    });\n    farthestRoom.setType(RoomType.BOSS);\n\n    // Assign remaining rooms randomly\n    const remainingTypes = [RoomType.STORAGE, RoomType.TREASURE, RoomType.STANDARD];\n    this.rooms.forEach(room => {\n      if (!room.type || room.type === RoomType.STANDARD) {\n        const randomType = remainingTypes[Math.floor(Math.random() * remainingTypes.length)];\n        room.setType(randomType);\n      }\n    });\n  }\n\n  applyToGrid() {\n    // First pass: Apply rooms\n    for (const room of this.rooms) {\n      for (let y = room.y; y < room.y + room.height; y++) {\n        for (let x = room.x; x < room.x + room.width; x++) {\n          if (this.isInBounds(x, y)) {\n            this.grid[y][x] = 1; // floor\n          }\n        }\n      }\n    }\n\n    // Second pass: Apply corridors\n    for (const corridor of this.corridors) {\n      for (const point of corridor.path) {\n        if (this.isInBounds(point.x, point.y)) {\n          this.grid[point.y][point.x] = 1; // floor\n        }\n      }\n    }\n\n    // Third pass: Add walls\n    const tempGrid = this.grid.map(row => [...row]);\n    for (let y = 0; y < this.height; y++) {\n      for (let x = 0; x < this.width; x++) {\n        if (tempGrid[y][x] === 0) { // Empty space\n          if (this.hasAdjacentFloor(x, y)) {\n            this.grid[y][x] = 3; // wall\n          }\n        }\n      }\n    }\n\n    // Fourth pass: Place doors\n    console.log('Attempting to place doors...');\n    this.placeDoors();\n  }\n\n  placeDoors() {\n    for (const corridor of this.corridors) {\n      // Only check the points where the corridor meets rooms\n      const startPoint = corridor.path[0];\n      const endPoint = corridor.path[corridor.path.length - 1];\n\n      // Try to place doors at the ends of corridors\n      if (this.shouldPlaceDoor(startPoint.x, startPoint.y)) {\n        this.grid[startPoint.y][startPoint.x] = 2; // door tile value\n      }\n\n      if (this.shouldPlaceDoor(endPoint.x, endPoint.y)) {\n        this.grid[endPoint.y][endPoint.x] = 2; // door tile value\n      }\n    }\n  }\n\n  shouldPlaceDoor(x, y) {\n    if (!this.isInBounds(x, y)) return false;\n\n    // The point itself must be a floor tile\n    if (this.grid[y][x] !== 1) return false;\n\n    // Check if there's already a door nearby\n    for (let dy = -2; dy <= 2; dy++) {\n      for (let dx = -2; dx <= 2; dx++) {\n        const nx = x + dx;\n        const ny = y + dy;\n        if (this.isInBounds(nx, ny) && this.grid[ny][nx] === 2) {\n          return false; // Door too close\n        }\n      }\n    }\n\n    // Check horizontal door possibility (walls on north and south)\n    const horizontalDoor =\n      this.isInBounds(x, y - 1) && this.grid[y - 1][x] === 3 && // Wall above\n      this.isInBounds(x, y + 1) && this.grid[y + 1][x] === 3 && // Wall below\n      this.isInBounds(x - 1, y) && this.grid[y][x - 1] === 1 && // Floor left\n      this.isInBounds(x + 1, y) && this.grid[y][x + 1] === 1;   // Floor right\n\n    // Check vertical door possibility (walls on east and west)\n    const verticalDoor =\n      this.isInBounds(x - 1, y) && this.grid[y][x - 1] === 3 && // Wall left\n      this.isInBounds(x + 1, y) && this.grid[y][x + 1] === 3 && // Wall right\n      this.isInBounds(x, y - 1) && this.grid[y - 1][x] === 1 && // Floor above\n      this.isInBounds(x, y + 1) && this.grid[y + 1][x] === 1;   // Floor below\n\n    return horizontalDoor || verticalDoor;\n  }\n\n  hasAdjacentFloor(x, y) {\n    for (let dy = -1; dy <= 1; dy++) {\n      for (let dx = -1; dx <= 1; dx++) {\n        if (dx === 0 && dy === 0) continue;\n        const ny = y + dy;\n        const nx = x + dx;\n        if (this.isInBounds(nx, ny) && this.grid[ny][nx] === 1) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  isInBounds(x, y) {\n    return x >= 0 && x < this.width && y >= 0 && y < this.height;\n  }\n}\n","// src/game/dungeon/Room.js\n\nexport const RoomType = {\n  STANDARD: 'standard',\n  ENTRANCE: 'entrance',\n  LARGE_HALL: 'largeHall',\n  BOSS: 'boss',\n  STORAGE: 'storage',\n  TREASURE: 'treasure'\n};\n\nexport class Room {\n  constructor(x, y, width, height) {\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n    this.doors = [];\n    this.type = RoomType.STANDARD;\n    this.features = new Map();\n\n    // Additional properties for special rooms\n    this.isLocked = false;\n    this.requiredKey = null;\n    this.contents = new Set(); // For items, monsters, etc.\n  }\n\n  intersects(other, padding = 0) {\n    return !(this.x + this.width + padding < other.x ||\n      other.x + other.width + padding < this.x ||\n      this.y + this.height + padding < other.y ||\n      other.y + other.height + padding < this.y);\n  }\n\n  getCenter() {\n    return {\n      x: Math.floor(this.x + this.width / 2),\n      y: Math.floor(this.y + this.height / 2)\n    };\n  }\n\n  getBounds() {\n    return {\n      left: this.x,\n      right: this.x + this.width,\n      top: this.y,\n      bottom: this.y + this.height\n    };\n  }\n\n  addDoor(x, y, type = 'normal') {\n    this.doors.push({ x, y, type });\n  }\n\n  // Get minimum size requirements for each room type\n  static getMinSize(type) {\n    switch (type) {\n      case RoomType.LARGE_HALL:\n        return { width: 12, height: 12 };\n      case RoomType.BOSS:\n        return { width: 15, height: 15 };\n      case RoomType.STORAGE:\n        return { width: 5, height: 5 };\n      case RoomType.TREASURE:\n        return { width: 7, height: 7 };\n      case RoomType.ENTRANCE:\n        return { width: 8, height: 8 };\n      default:\n        return { width: 6, height: 6 };\n    }\n  }\n\n  setType(type) {\n    this.type = type;\n    // Apply type-specific properties\n    switch (type) {\n      case RoomType.TREASURE:\n        this.isLocked = true;\n        this.requiredKey = 'treasure_key';\n        break;\n      case RoomType.BOSS:\n        this.isLocked = true;\n        break;\n      case RoomType.ENTRANCE:\n        // Entrance should always be accessible\n        this.isLocked = false;\n        break;\n    }\n    return this;\n  }\n\n  // Generate a room of specific type\n  static generate(type, availableWidth, availableHeight, padding = 2) {\n    const minSize = Room.getMinSize(type);\n    let width, height;\n\n    switch (type) {\n      case RoomType.LARGE_HALL:\n        width = minSize.width + Math.floor(Math.random() * 4);\n        height = minSize.height + Math.floor(Math.random() * 4);\n        break;\n      case RoomType.BOSS:\n        width = minSize.width + Math.floor(Math.random() * 5);\n        height = minSize.height + Math.floor(Math.random() * 5);\n        break;\n      case RoomType.STORAGE:\n        width = minSize.width + Math.floor(Math.random() * 2);\n        height = minSize.height + Math.floor(Math.random() * 2);\n        break;\n      case RoomType.TREASURE:\n        width = minSize.width + Math.floor(Math.random() * 3);\n        height = minSize.height + Math.floor(Math.random() * 3);\n        break;\n      case RoomType.ENTRANCE:\n        width = minSize.width;\n        height = minSize.height;\n        break;\n      default: // STANDARD\n        width = minSize.width + Math.floor(Math.random() * 4);\n        height = minSize.height + Math.floor(Math.random() * 4);\n    }\n\n    // Ensure room fits in available space\n    width = Math.min(width, availableWidth - padding * 2);\n    height = Math.min(height, availableHeight - padding * 2);\n\n    // Position room\n    const x = padding + Math.floor(Math.random() * (availableWidth - width - padding * 2));\n    const y = padding + Math.floor(Math.random() * (availableHeight - height - padding * 2));\n\n    const room = new Room(x, y, width, height);\n    room.setType(type);\n    return room;\n  }\n}\n","// src/game/dungeon/RoomColors.js\n\nimport { RoomType } from './Room.js';\nexport const RoomColors = {\n  [RoomType.STANDARD]: '#444',    // Standard gray\n  [RoomType.ENTRANCE]: '#4a9',    // Teal\n  [RoomType.LARGE_HALL]: '#66a',  // Purple-blue\n  [RoomType.BOSS]: '#a44',        // Dark red\n  [RoomType.STORAGE]: '#974',     // Tan\n  [RoomType.TREASURE]: '#aa4',    // Gold\n  'corridor': '#335',             // Dark blue-gray\n  'wall': '#666',                 // Light gray\n  'door': {\n    'open': '#4a2',             // Green\n    'closed': '#8b4513'         // Brown\n  }\n};\n","// src/game/grid/GridCell.js\n\nexport class GridCell {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n    this.type = 'floor';\n    this.walkable = true;\n    this.transparent = true;\n    this.visible = false;\n    this.explored = false;\n    this.entities = new Set();\n    this.properties = new Map();\n    this.isDoor = false;\n    this.isOpen = false;\n  }\n\n  // Entity management\n  addEntity(entity) {\n    this.entities.add(entity);\n    return this;\n  }\n\n  removeEntity(entity) {\n    this.entities.delete(entity);\n    return this;\n  }\n\n  hasBlockingEntity() {\n    return Array.from(this.entities).some(entity => entity.blocking);\n  }\n\n  // Property management\n  setProperty(key, value) {\n    this.properties.set(key, value);\n    return this;\n  }\n\n  getProperty(key) {\n    return this.properties.get(key);\n  }\n\n  hasProperty(key) {\n    return this.properties.has(key);\n  }\n\n  // Cell type management\n  setType(type) {\n    this.type = type;\n\n    switch (type) {\n      case 'wall':\n        this.walkable = false;\n        this.transparent = false;\n        this.isDoor = false;\n        break;\n      case 'door':\n        this.isDoor = true;\n        this.isOpen = Math.random() < 0.2; // 20% chance to start open\n        this.walkable = this.isOpen;\n        this.transparent = this.isOpen;\n        break;\n      case 'floor':\n        this.walkable = true;\n        this.transparent = true;\n        this.isDoor = false;\n        break;\n      default:\n        console.warn(`Unknown cell type: ${type}`);\n    }\n  }\n\n  toggleDoor() {\n    if (!this.isDoor) return false;\n\n    this.isOpen = !this.isOpen;\n    this.walkable = this.isOpen;\n    this.transparent = this.isOpen;\n    return true;\n  }\n}\n","// src/game/grid/GridManager.js\n\nimport { GridCell } from './GridCell.js';\n\nexport class GridManager {\n  constructor(width, height, tileSize = 32) {\n    this.width = width;\n    this.height = height;\n    this.tileSize = tileSize;\n    this.grid = this.createGrid();\n  }\n\n  createGrid() {\n    const grid = new Array(this.height);\n    for (let y = 0; y < this.height; y++) {\n      grid[y] = new Array(this.width);\n      for (let x = 0; x < this.width; x++) {\n        grid[y][x] = new GridCell(x, y);\n      }\n    }\n    return grid;\n  }\n\n  isInBounds(x, y) {\n    return x >= 0 && x < this.width && y >= 0 && y < this.height;\n  }\n\n  getCell(x, y) {\n    if (!this.isInBounds(x, y)) return null;\n    return this.grid[y][x];\n  }\n\n  // Movement validation\n  canMoveTo(x, y) {\n    const cell = this.getCell(x, y);\n    if (!cell) return false;\n\n    // Check if it's a door and it's closed\n    if (cell.isDoor && !cell.isOpen) {\n      return false;\n    }\n\n    return cell.walkable && !cell.hasBlockingEntity();\n  }\n\n  // Coordinate conversion\n  gridToScreen(gridX, gridY) {\n    return {\n      x: gridX * this.tileSize,\n      y: gridY * this.tileSize\n    };\n  }\n\n  screenToGrid(screenX, screenY) {\n    return {\n      x: Math.floor(screenX / this.tileSize),\n      y: Math.floor(screenY / this.tileSize)\n    };\n  }\n\n  // Get all neighbors of a cell\n  getNeighbors(x, y, includeDiagonals = false) {\n    const neighbors = [];\n    const directions = [\n      { x: 0, y: -1 },  // Up\n      { x: 1, y: 0 },   // Right\n      { x: 0, y: 1 },   // Down\n      { x: -1, y: 0 }   // Left\n    ];\n\n    if (includeDiagonals) {\n      directions.push(\n        { x: 1, y: -1 },  // Up-Right\n        { x: 1, y: 1 },   // Down-Right\n        { x: -1, y: 1 },  // Down-Left\n        { x: -1, y: -1 }  // Up-Left\n      );\n    }\n\n    for (const dir of directions) {\n      const newX = x + dir.x;\n      const newY = y + dir.y;\n      const cell = this.getCell(newX, newY);\n      if (cell) neighbors.push(cell);\n    }\n\n    return neighbors;\n  }\n\n  // Get walkable neighbors (for pathfinding)\n  getWalkableNeighbors(x, y, includeDiagonals = false) {\n    return this.getNeighbors(x, y, includeDiagonals)\n      .filter(cell => this.canMoveTo(cell.x, cell.y));\n  }\n\n  // Line of sight check\n  hasLineOfSight(x1, y1, x2, y2) {\n    // Bresenham's line algorithm\n    const dx = Math.abs(x2 - x1);\n    const dy = Math.abs(y2 - y1);\n    const sx = x1 < x2 ? 1 : -1;\n    const sy = y1 < y2 ? 1 : -1;\n    let err = dx - dy;\n\n    let x = x1;\n    let y = y1;\n\n    while (true) {\n      if (x === x2 && y === y2) return true;\n\n      const cell = this.getCell(x, y);\n      if (!cell || !cell.transparent) return false;\n\n      const e2 = 2 * err;\n      if (e2 > -dy) {\n        err -= dy;\n        x += sx;\n      }\n      if (e2 < dx) {\n        err += dx;\n        y += sy;\n      }\n    }\n  }\n\n  // Get all cells within a certain range\n  getCellsInRange(centerX, centerY, range) {\n    const cells = [];\n    for (let y = centerY - range; y <= centerY + range; y++) {\n      for (let x = centerX - range; x <= centerX + range; x++) {\n        const cell = this.getCell(x, y);\n        if (cell) {\n          const distance = Math.sqrt(\n            Math.pow(x - centerX, 2) +\n            Math.pow(y - centerY, 2)\n          );\n          if (distance <= range) {\n            cells.push(cell);\n          }\n        }\n      }\n    }\n    return cells;\n  }\n\n  resetVisibility() {\n    for (let y = 0; y < this.height; y++) {\n      for (let x = 0; x < this.width; x++) {\n        this.grid[y][x].visible = false;\n      }\n    }\n  }\n\n  clear() {\n    this.grid = this.createGrid();\n  }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// src/game/index.js\n\nimport { GridManager } from './grid/GridManager.js';\nimport { DungeonGenerator } from './dungeon/DungeonGenerator.js';\nimport { Camera } from './Camera.js';\nimport { RoomType } from './dungeon/Room.js';\nimport { RoomColors } from './dungeon/RoomColors.js';\n\nclass GameManager {\n  constructor() {\n    console.log('GameManager initializing...');\n\n    try {\n      // Initialize canvas\n      this.canvas = document.getElementById('gameCanvas');\n      if (!this.canvas) {\n        throw new Error('Canvas element not found');\n      }\n\n      this.ctx = this.canvas.getContext('2d');\n      if (!this.ctx) {\n        throw new Error('Could not get 2D context');\n      }\n\n      // Constants\n      const GRID_WIDTH = 50;  // World size\n      const GRID_HEIGHT = 50;\n      const TILE_SIZE = 16;\n\n      // Set fixed canvas size (won't scale with window)\n      this.canvas.width = 800;   // Show 50 tiles at 16px each\n      this.canvas.height = 600;  // Show 37.5 tiles vertically\n\n      // Initialize camera\n      this.camera = new Camera(\n        this.canvas.width,\n        this.canvas.height,\n        GRID_WIDTH,\n        GRID_HEIGHT,\n        TILE_SIZE\n      );\n\n      // Initial canvas setup\n      this.ctx.imageSmoothingEnabled = false;\n\n      // Create grid system\n      this.gridManager = new GridManager(GRID_WIDTH, GRID_HEIGHT, TILE_SIZE);\n\n      // Create dungeon generator\n      this.dungeonGenerator = new DungeonGenerator(GRID_WIDTH, GRID_HEIGHT);\n\n      // Initialize room type tracking\n      this.roomTypes = new Map(); // Stores coordinates -> room type\n\n      // Set up game state\n      this.lastFrameTime = 0;\n      this.frameCount = 0;\n\n      // Player state\n      this.playerPos = { x: 0, y: 0 };\n      this.playerFacing = { x: 0, y: -1 }; // Initially facing north\n\n      // Generate initial dungeon and place player\n      this.generateNewDungeon();\n\n      // Bind event handlers\n      this.handleKeyDown = this.handleKeyDown.bind(this);\n\n      // Add key event listeners\n      window.addEventListener('keydown', (event) => {\n        if (event.code === 'Space') {\n          this.generateNewDungeon();\n          event.preventDefault();\n        } else {\n          this.handleKeyDown(event);\n        }\n      });\n\n      // Add legend\n      this.addLegend();\n\n      // Start game loop\n      console.log('Starting game loop...');\n      this.gameLoop(0);\n\n      // Hide loading screen\n      const loadingScreen = document.getElementById('loadingScreen');\n      if (loadingScreen) {\n        loadingScreen.classList.add('hidden');\n      }\n\n      // Add instructions\n      this.addInstructions();\n\n    } catch (error) {\n      console.error('Game initialization error:', error);\n      throw error;\n    }\n  }\n\n  addLegend() {\n    const legend = document.createElement('div');\n    legend.style.position = 'absolute';\n    legend.style.top = '10px';\n    legend.style.right = '10px';\n    legend.style.color = 'white';\n    legend.style.fontFamily = 'monospace';\n    legend.style.fontSize = '14px';\n    legend.style.backgroundColor = 'rgba(0, 0, 0, 0.7)';\n    legend.style.padding = '10px';\n    legend.style.borderRadius = '5px';\n\n    let legendHTML = '<div style=\"text-align: left; font-weight: bold;\">Room Types:</div>';\n\n    // Add each room type to the legend\n    Object.entries(RoomType).forEach(([key, value]) => {\n      const color = RoomColors[value];\n      legendHTML += `\n          <div style=\"display: flex; align-items: center; margin: 5px 0;\">\n              <div style=\"width: 20px; height: 20px; background-color: ${color}; margin-right: 10px; border: 1px solid #666;\"></div>\n              <span>${key.charAt(0) + key.slice(1).toLowerCase().replace('_', ' ')}</span>\n          </div>`;\n    });\n\n    // Add corridor\n    legendHTML += `\n      <div style=\"display: flex; align-items: center; margin: 5px 0;\">\n          <div style=\"width: 20px; height: 20px; background-color: ${RoomColors.corridor}; margin-right: 10px; border: 1px solid #666;\"></div>\n          <span>Corridor</span>\n      </div>`;\n\n    // Add doors\n    legendHTML += `\n      <div style=\"display: flex; align-items: center; margin: 5px 0;\">\n          <div style=\"width: 20px; height: 20px; background-color: ${RoomColors.door.closed}; margin-right: 10px; border: 1px solid #666;\"></div>\n          <span>Door (Closed)</span>\n      </div>\n      <div style=\"display: flex; align-items: center; margin: 5px 0;\">\n          <div style=\"width: 20px; height: 20px; background-color: ${RoomColors.door.open}; margin-right: 10px; border: 1px solid #666;\"></div>\n          <span>Door (Open)</span>\n      </div>`;\n\n    legend.innerHTML = legendHTML;\n    document.getElementById('gameContainer').appendChild(legend);\n  }\n\n  generateNewDungeon() {\n    /// Clear existing room type tracking\n    this.roomTypes.clear();\n\n    // Generate new dungeon layout\n    const dungeon = this.dungeonGenerator.generate();\n\n    // Store room types for each cell\n    for (const room of dungeon.rooms) {\n      for (let y = room.y; y < room.y + room.height; y++) {\n        for (let x = room.x; x < room.x + room.width; x++) {\n          this.roomTypes.set(`${x},${y}`, room.type);\n        }\n      }\n    }\n\n    // Store corridor locations\n    for (const corridor of dungeon.corridors) {\n      for (const point of corridor.path) {\n        this.roomTypes.set(`${point.x},${point.y}`, 'corridor');\n      }\n    }\n\n    // Clear existing grid\n    this.gridManager.clear();\n\n    // Apply dungeon to grid\n    for (let y = 0; y < dungeon.grid.length; y++) {\n      for (let x = 0; x < dungeon.grid[y].length; x++) {\n        const cell = this.gridManager.getCell(x, y);\n        switch (dungeon.grid[y][x]) {\n          case 0: // Empty\n            cell.setType('wall');\n            cell.walkable = false;\n            cell.transparent = false;\n            break;\n          case 1: // Floor\n            cell.setType('floor');\n            cell.walkable = true;\n            cell.transparent = true;\n            break;\n          case 2: // Door\n            cell.setType('door');\n            cell.walkable = true;\n            cell.transparent = false;\n            break;\n          case 3: // Wall\n            cell.setType('wall');\n            cell.walkable = false;\n            cell.transparent = false;\n            break;\n        }\n      }\n    }\n\n    // Place player in a valid position\n    this.placePlayerInDungeon();\n\n    // Reset camera to follow player\n    this.camera.follow(this.playerPos.x, this.playerPos.y);\n\n    // Update initial visibility\n    this.updateVisibility();\n  }\n\n  placePlayerInDungeon() {\n    // Find first walkable cell\n    for (let y = 0; y < this.gridManager.height; y++) {\n      for (let x = 0; x < this.gridManager.width; x++) {\n        if (this.gridManager.canMoveTo(x, y)) {\n          this.playerPos = { x, y };\n          return;\n        }\n      }\n    }\n  }\n\n  updateVisibility() {\n    this.gridManager.resetVisibility();\n    const visibleCells = this.gridManager.getCellsInRange(this.playerPos.x, this.playerPos.y, 5);\n    for (const cell of visibleCells) {\n      if (this.gridManager.hasLineOfSight(this.playerPos.x, this.playerPos.y, cell.x, cell.y)) {\n        cell.visible = true;\n        cell.explored = true;\n      }\n    }\n  }\n\n  addInstructions() {\n    const instructions = document.createElement('div');\n    instructions.style.position = 'absolute';\n    instructions.style.top = '10px';\n    instructions.style.left = '10px';\n    instructions.style.color = 'white';\n    instructions.style.fontFamily = 'monospace';\n    instructions.style.fontSize = '14px';\n    instructions.style.backgroundColor = 'rgba(0, 0, 0, 0.7)';\n    instructions.style.padding = '10px';\n    instructions.style.borderRadius = '5px';\n    instructions.innerHTML = 'Arrow Keys: Move<br>E: Open/Close Door<br>Space: Generate New Dungeon';\n    document.getElementById('gameContainer').appendChild(instructions);\n  }\n\n  handleKeyDown(event) {\n    if (event.code === 'KeyE') {\n      this.tryToggleDoorInFacingDirection();\n      event.preventDefault();\n      return;\n    }\n\n    let newX = this.playerPos.x;\n    let newY = this.playerPos.y;\n    let newFacingX = 0;\n    let newFacingY = 0;\n\n    // Determine facing direction based on key\n    switch (event.code) {\n      case 'ArrowUp':\n        newY--;\n        newFacingX = 0;\n        newFacingY = -1;\n        break;\n      case 'ArrowDown':\n        newY++;\n        newFacingX = 0;\n        newFacingY = 1;\n        break;\n      case 'ArrowLeft':\n        newX--;\n        newFacingX = -1;\n        newFacingY = 0;\n        break;\n      case 'ArrowRight':\n        newX++;\n        newFacingX = 1;\n        newFacingY = 0;\n        break;\n      default:\n        return;\n    }\n\n    // Always update facing direction\n    this.playerFacing.x = newFacingX;\n    this.playerFacing.y = newFacingY;\n\n    // Attempt movement if possible\n    if (this.gridManager.canMoveTo(newX, newY)) {\n      this.playerPos.x = newX;\n      this.playerPos.y = newY;\n      this.camera.follow(this.playerPos.x, this.playerPos.y);\n      this.updateVisibility();\n    }\n\n    event.preventDefault();\n  }\n\n  tryToggleDoorInFacingDirection() {\n    const facingX = this.playerPos.x + this.playerFacing.x;\n    const facingY = this.playerPos.y + this.playerFacing.y;\n\n    const facingCell = this.gridManager.getCell(facingX, facingY);\n    if (facingCell && facingCell.isDoor) {\n      if (facingCell.toggleDoor()) {\n        this.updateVisibility();\n        return true;\n      }\n    }\n    return false;\n  }\n\n\n  renderGrid() {\n    const { width, height, tileSize } = this.gridManager;\n\n    for (let y = 0; y < height; y++) {\n      for (let x = 0; x < width; x++) {\n        if (!this.camera.isVisible(x, y)) continue;\n\n        const cell = this.gridManager.getCell(x, y);\n        if (!cell.explored) continue;\n\n        const screenPos = this.camera.worldToScreen(x, y);\n        let fillColor = '#333';\n\n        if (!cell.visible) {\n          fillColor = '#1a1a1a';\n        } else {\n          const roomType = this.roomTypes.get(`${x},${y}`);\n          switch (cell.type) {\n            case 'wall':\n              fillColor = RoomColors.wall;\n              break;\n            case 'door':\n              fillColor = cell.isOpen ? RoomColors.door.open : RoomColors.door.closed;\n              break;\n            case 'floor':\n              if (roomType === 'corridor') {\n                fillColor = RoomColors.corridor;\n              } else {\n                fillColor = RoomColors[roomType] || RoomColors[RoomType.STANDARD];\n              }\n              break;\n          }\n        }\n\n        this.ctx.fillStyle = fillColor;\n        this.ctx.fillRect(screenPos.x, screenPos.y, tileSize, tileSize);\n\n        if (cell.visible) {\n          this.ctx.strokeStyle = '#222';\n          this.ctx.strokeRect(screenPos.x, screenPos.y, tileSize, tileSize);\n        }\n      }\n    }\n  }\n\n  renderPlayer() {\n    const screenPos = this.camera.worldToScreen(this.playerPos.x, this.playerPos.y);\n    const tileSize = this.gridManager.tileSize;\n\n    // Draw player base\n    this.ctx.fillStyle = '#ff0';\n    this.ctx.fillRect(\n      screenPos.x + 2,\n      screenPos.y + 2,\n      tileSize - 4,\n      tileSize - 4\n    );\n\n    // Draw direction indicator\n    this.ctx.fillStyle = '#f00';\n    const indicatorSize = tileSize / 3;\n    const centerX = screenPos.x + tileSize / 2;\n    const centerY = screenPos.y + tileSize / 2;\n\n    const indicatorX = centerX + (this.playerFacing.x * (tileSize / 4));\n    const indicatorY = centerY + (this.playerFacing.y * (tileSize / 4));\n\n    this.ctx.beginPath();\n    this.ctx.arc(indicatorX, indicatorY, indicatorSize / 2, 0, Math.PI * 2);\n    this.ctx.fill();\n  }\n\n  gameLoop(timestamp) {\n    try {\n      const deltaTime = timestamp - this.lastFrameTime;\n      this.lastFrameTime = timestamp;\n\n      this.ctx.fillStyle = '#000';\n      this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n\n      this.renderGrid();\n      this.renderPlayer();\n\n      this.ctx.fillStyle = '#fff';\n      this.ctx.font = '12px monospace';\n      this.ctx.fillText(`FPS: ${Math.round(1000 / deltaTime)}`, 10, this.canvas.height - 20);\n      this.ctx.fillText(`Pos: (${this.playerPos.x}, ${this.playerPos.y})`, 10, this.canvas.height - 8);\n\n      this.frameCount++;\n      requestAnimationFrame(this.gameLoop.bind(this));\n    } catch (error) {\n      console.error('Game loop error:', error);\n      throw error;\n    }\n  }\n}\n\n// Initialize game when the window loads\nconsole.log('Game script loaded, waiting for window load');\nwindow.addEventListener('load', () => {\n  console.log('Window loaded, initializing game');\n  try {\n    window.game = new GameManager();\n  } catch (error) {\n    console.error('Failed to initialize game:', error);\n  }\n});\n\nexport default GameManager;\n"],"names":["Camera","width","height","worldWidth","worldHeight","tileSize","_classCallCheck","x","y","tilesX","Math","floor","tilesY","scrollThreshold","_createClass","key","value","follow","targetX","targetY","screenX","screenY","max","min","worldToScreen","worldX","worldY","isVisible","screenPos","Corridor","startX","startY","endX","endY","type","path","generatePath","currentX","currentY","push","Room","RoomType","STANDARD","ENTRANCE","LARGE_HALL","BOSS","STORAGE","TREASURE","DungeonGenerator","rooms","corridors","grid","Array","fill","map","generate","_this","maxAttempts","attempts","generateRooms","connectRooms","assignRoomTypes","applyToGrid","Error","minRooms","maxRooms","totalAttempts","minSize","maxSize","gridDivisions","sectionWidth","sectionHeight","entranceMinSize","getMinSize","entranceRoom","setType","sections","sort","random","_i","_sections","length","section","placed","sectionAttempts","maxSectionAttempts","sectionX","sectionY","newRoom","canPlaceRoom","i","console","error","concat","isRoomInBounds","_iterator","_createForOfIteratorHelper","_step","s","n","done","room","intersects","err","e","f","sortedRooms","_toConsumableArray","a","b","roomA","roomB","createSingleCorridor","_this2","startPoint","findBestExitPoint","endPoint","corridor","filter","point","isPointInAnyRoom","startDoor","findDoorPoint","endDoor","forEach","targetRoom","roomCenter","getCenter","targetCenter","corridorPoint","adjacentPoints","_i2","_adjacentPoints","isPointInRoom","mergeIntersectingCorridors","merged","used","Set","has","currentCorridor","_objectSpread","add","mergedAny","j","doCorridorsIntersect","mergeTwoCorridors","corridorA","corridorB","some","pointA","pointB","allPoints","p","mergedPath","from","str","_str$split$map","split","Number","_str$split$map2","_slicedToArray","findValidDoorPointsForMergedCorridor","_this3","doorPoints","connectedRoom","findConnectedRoom","isValidDoorLocation","find","corridorPath","_this4","isAtBoundary","neighbors","getAdjacentPoints","hasCorridorConnection","createCorridorBetweenRooms","_this5","findClosestDoorPoint","findBestConnection","_this6","strategies","dx","dy","_i3","_strategies","_strategies$_i","findConnectionPoint","isValidCorridor","getDoorPoints","offsetX","offsetY","_iterator2","_step2","_iterator3","_step3","neighbor","findDoorPlacementPoints","startSegment","slice","validStart","isValidDoorPlacement","endSegment","validEnd","centerA","centerB","deltas","_i4","_deltas","_deltas$_i","isInBounds","start","end","isAdjacentToRoom","neighboringCells","corridorNeighbors","cell","farthestRoom","reduce","farthest","distance","sqrt","pow","remainingTypes","randomType","_iterator4","_step4","_iterator5","_step5","_iterator6","_step6","tempGrid","row","hasAdjacentFloor","log","placeDoors","_iterator7","_step7","shouldPlaceDoor","nx","ny","horizontalDoor","verticalDoor","doors","features","Map","isLocked","requiredKey","contents","other","padding","arguments","undefined","getBounds","left","right","top","bottom","addDoor","availableWidth","availableHeight","RoomColors","_defineProperty","GridCell","walkable","transparent","visible","explored","entities","properties","isDoor","isOpen","addEntity","entity","removeEntity","hasBlockingEntity","blocking","setProperty","set","getProperty","get","hasProperty","warn","toggleDoor","GridManager","createGrid","getCell","canMoveTo","gridToScreen","gridX","gridY","screenToGrid","getNeighbors","includeDiagonals","directions","_directions","dir","newX","newY","getWalkableNeighbors","hasLineOfSight","x1","y1","x2","y2","abs","sx","sy","e2","getCellsInRange","centerX","centerY","range","cells","resetVisibility","clear","GameManager","canvas","document","getElementById","ctx","getContext","GRID_WIDTH","GRID_HEIGHT","TILE_SIZE","camera","imageSmoothingEnabled","gridManager","dungeonGenerator","roomTypes","lastFrameTime","frameCount","playerPos","playerFacing","generateNewDungeon","handleKeyDown","bind","window","addEventListener","event","code","preventDefault","addLegend","gameLoop","loadingScreen","classList","addInstructions","legend","createElement","style","position","color","fontFamily","fontSize","backgroundColor","borderRadius","legendHTML","Object","entries","_ref","_ref2","charAt","toLowerCase","replace","door","closed","open","innerHTML","appendChild","dungeon","placePlayerInDungeon","updateVisibility","visibleCells","instructions","tryToggleDoorInFacingDirection","newFacingX","newFacingY","facingX","facingY","facingCell","renderGrid","_this$gridManager","fillColor","roomType","wall","fillStyle","fillRect","strokeStyle","strokeRect","renderPlayer","indicatorSize","indicatorX","indicatorY","beginPath","arc","PI","timestamp","deltaTime","font","fillText","round","requestAnimationFrame","game"],"sourceRoot":""}